/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-04-16 01:16:36.071041
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((5.0e-5)*x4);
x11=((1.0)*x6);
x12=((0.0125)*x1);
x13=((1.0)*x5);
x14=((5.0e-5)*x1);
x15=((0.19131)*x4);
x16=((0.007)*x6);
x17=((1.0)*x0);
x18=((1.0)*x1);
x19=((0.007)*x9);
x20=((0.007)*x5);
x21=((0.19131)*x1);
x22=((0.1808)*x0);
x23=(x2*x7);
x24=(x1*x3);
x25=(x2*x4);
x26=(x3*x4);
x27=(x3*x7);
x28=(x0*x2);
x29=(x1*x2);
x30=(x0*x3);
x31=((((-1.0)*x18*x2))+x26);
x32=((((-1.0)*x18*x3))+(((-1.0)*x25)));
x33=(x0*((x24+x25)));
x34=(((x23*x4))+((x24*x7)));
x35=(x17*(((((-1.0)*x29))+x26)));
x36=((((-1.0)*x18*x23))+(((1.0)*x26*x7)));
eetrans[0]=(((x6*((((x21*x30))+((x15*x28))))))+((x5*((((x21*x28))+(((-1.0)*x15*x30))))))+(((-0.00045)*x7))+((x22*x25))+((x22*x24))+((x19*x7))+(((0.027)*x30))+(((0.2042)*x28))+((x5*((((x14*x30))+((x10*x28))))))+((x8*(((((-1.0)*x20*x33))+(((-1.0)*x16*x35))))))+((x6*((((x10*x30))+(((-1.0)*x14*x28))))))+((x12*x28))+(((-0.0125)*x0*x26)));
eetrans[1]=((((-0.0125)*x26*x7))+(((0.027)*x27))+((x6*((((x21*x27))+((x15*x23))))))+(((-1.0)*x0*x19))+(((0.00045)*x0))+((x5*((((x14*x27))+((x10*x23))))))+((x6*(((((-1.0)*x14*x23))+((x10*x27))))))+((x8*(((((-1.0)*x20*x34))+(((-1.0)*x16*x36))))))+(((0.2042)*x23))+((x5*(((((-1.0)*x15*x27))+((x21*x23))))))+((x12*x23))+(((0.1808)*x23*x4))+(((0.1808)*x24*x7)));
IkReal x37=((1.0)*x2);
eetrans[2]=((0.1455)+(((-0.027)*x2))+((x6*(((((-1.0)*x10*x37))+(((-1.0)*x14*x3))))))+((x5*((((x10*x3))+(((-1.0)*x14*x37))))))+(((0.1808)*x26))+(((0.0125)*x25))+((x8*(((((-1.0)*x20*x31))+(((-1.0)*x16*x32))))))+((x5*((((x21*x3))+((x15*x2))))))+(((-0.1808)*x29))+((x6*(((((-1.0)*x21*x37))+((x15*x3))))))+((x12*x3))+(((0.2042)*x3)));
eerot[0]=(((x7*x9))+((x8*(((((-1.0)*x11*x35))+(((-1.0)*x13*x33)))))));
eerot[1]=(((x8*(((((-1.0)*x11*x36))+(((-1.0)*x13*x34))))))+(((-1.0)*x17*x9)));
eerot[2]=(x8*(((((-1.0)*x11*x32))+(((-1.0)*x13*x31)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.1455)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((IKabs(((((0.007)*r01))+(((-1.0)*py)))))+(IKabs(((((-0.007)*r00))+px))));
j0eval[1]=((((-285.714285714286)*px*r00))+(r00*r00)+(((-285.714285714286)*py*r01))+(r01*r01)+(((20408.1632653061)*(px*px)))+(((20408.1632653061)*(py*py))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x38=((((-0.007)*r00))+px);
IkReal x39=((((0.007)*r01))+(((-1.0)*py)));
CheckValue<IkReal> x42 = IKatan2WithCheck(IkReal(x39),IkReal(x38),IKFAST_ATAN2_MAGTHRESH);
if(!x42.valid){
continue;
}
IkReal x40=((1.0)*(x42.value));
if((((x38*x38)+(x39*x39))) < -0.00001)
continue;
CheckValue<IkReal> x43=IKPowWithIntegerCheck(IKabs(IKsqrt(((x38*x38)+(x39*x39)))),-1);
if(!x43.valid){
continue;
}
if( (((0.00045)*(x43.value))) < -1-IKFAST_SINCOS_THRESH || (((0.00045)*(x43.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x41=IKasin(((0.00045)*(x43.value)));
j0array[0]=((((-1.0)*x41))+(((-1.0)*x40)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x40))+x41);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x44=px*px;
IkReal x45=py*py;
IkReal x46=pz*pz;
IkReal x47=((0.0116998816944938)*r02);
IkReal x48=((0.014)*pz);
IkReal x49=((0.0350279883723082)*r02);
IkReal x50=((0.0545161428018235)*r02);
IkReal x51=((0.028)*pz);
IkReal x52=((0.0103576434828033)*r02);
IkReal x53=(cj0*r00);
IkReal x54=(py*sj0);
IkReal x55=((0.383494507999895)*r02);
IkReal x56=(r00*sj0);
IkReal x57=(r01*sj0);
IkReal x58=(cj0*px);
IkReal x59=((0.433305492000105)*r02);
IkReal x60=((0.433305492000105)*pz);
IkReal x61=((1.0)*r02);
IkReal x62=((0.0009)*cj0);
IkReal x63=(pz*r01);
IkReal x64=(py*r01);
IkReal x65=(px*r00);
IkReal x66=((0.307606509197637)*pz);
IkReal x67=((0.415606509197637)*pz);
IkReal x68=(pz*r02);
IkReal x69=(py*r02);
IkReal x70=((0.307606509197637)*r02);
IkReal x71=((0.0009)*px);
IkReal x72=((0.415606509197637)*r02);
IkReal x73=((0.383494507999895)*pz);
IkReal x74=(cj0*r01);
IkReal x75=(r02*sj0);
IkReal x76=((0.0018)*px);
IkReal x77=(py*r00);
IkReal x78=((0.0018)*cj0);
IkReal x79=(r01*x71);
IkReal x80=((0.014)*x58);
IkReal x81=((2.42970708610632e-5)*x74);
IkReal x82=((0.014)*x54);
IkReal x83=((0.0422510916276918)*x57);
IkReal x84=((0.0422510916276918)*x53);
IkReal x85=((0.0539934908023626)*x68);
IkReal x86=((2.42970708610632e-5)*x56);
IkReal x87=((0.0539934908023626)*x64);
IkReal x88=((0.0539934908023626)*x65);
IkReal x89=((0.0009)*x77);
IkReal x90=((0.000183822528599953)*x74);
IkReal x91=((0.408494507999895)*x68);
IkReal x92=((0.000183822528599953)*x56);
IkReal x93=((0.408494507999895)*x65);
IkReal x94=((0.0848674383055062)*x57);
IkReal x95=((0.0848674383055062)*x53);
IkReal x96=((0.408494507999895)*x64);
IkReal x97=(r02*x46);
IkReal x98=((0.0018)*x77);
IkReal x99=(r01*x76);
IkReal x100=((0.028)*x54);
IkReal x101=((0.028)*x58);
IkReal x102=((0.0628177634828033)*x57);
IkReal x103=((0.000183737471400047)*x74);
IkReal x104=(r02*x45);
IkReal x105=(r02*x44);
IkReal x106=((0.0628177634828033)*x53);
IkReal x107=((0.408305492000105)*x65);
IkReal x108=((0.408305492000105)*x68);
IkReal x109=((0.408305492000105)*x64);
IkReal x110=((0.000183737471400047)*x56);
IkReal x111=((2.43029291389368e-5)*x56);
IkReal x112=((0.0540065091976374)*x65);
IkReal x113=((0.0540065091976374)*x68);
IkReal x114=((0.0540065091976374)*x64);
IkReal x115=((2.43029291389368e-5)*x74);
IkReal x116=((0.0320793371981765)*x53);
IkReal x117=((0.0320793371981765)*x57);
IkReal x118=((1.0)*x45);
IkReal x119=((2.0)*x68);
IkReal x120=((2.0)*x44);
IkReal x121=((2.0)*x45);
IkReal x122=((1.0)*x44);
IkReal x123=((1.0)*x46);
IkReal x124=((2.0)*x46);
IkReal x125=(x53*x60);
IkReal x126=(x57*x60);
IkReal x127=(x54*x59);
IkReal x128=(x58*x59);
IkReal x129=(x62*x63);
IkReal x130=(x71*x75);
IkReal x131=(x54*x72);
IkReal x132=(x58*x72);
IkReal x133=(x62*x69);
IkReal x134=(x53*x67);
IkReal x135=((2.0)*pz*x65);
IkReal x136=(x57*x67);
IkReal x137=((0.0009)*pz*x56);
IkReal x138=((2.0)*py*x63);
IkReal x139=(x45*x61);
IkReal x140=(x44*x61);
IkReal x141=(x57*x66);
IkReal x142=(x53*x66);
IkReal x143=(x54*x70);
IkReal x144=(x58*x70);
IkReal x145=(x46*x61);
IkReal x146=(x46*x57);
IkReal x147=(x44*x57);
IkReal x148=(x45*x53);
IkReal x149=(x46*x53);
IkReal x150=(x63*x78);
IkReal x151=((2.0)*x104);
IkReal x152=((2.0)*x105);
IkReal x153=(x75*x76);
IkReal x154=(x44*x53);
IkReal x155=(x54*x55);
IkReal x156=(x55*x58);
IkReal x157=(x45*x57);
IkReal x158=(x53*x73);
IkReal x159=(x57*x73);
IkReal x160=(x119*x54);
IkReal x161=((2.0)*x54*x65);
IkReal x162=((2.0)*x58*x64);
IkReal x163=(x119*x58);
IkReal x164=((4.0)*x54*x65);
IkReal x165=((4.0)*x58*x64);
IkReal x166=((4.0)*x58*x68);
IkReal x167=(x121*x57);
IkReal x168=(x120*x53);
IkReal x169=((4.0)*x54*x68);
IkReal x170=(x124*x57);
IkReal x171=(x120*x57);
IkReal x172=(x121*x53);
IkReal x173=(x124*x53);
IkReal x174=(x122*x53);
IkReal x175=(x118*x57);
IkReal x176=(x122*x57);
IkReal x177=(x123*x53);
IkReal x178=(x118*x53);
IkReal x179=(x123*x57);
IkReal x180=(x104+x105);
IkReal x181=(x83+x84);
IkReal x182=(x117+x116);
IkReal x183=(x106+x102);
IkReal x184=(x157+x154);
IkReal x185=(x49+x95+x94);
IkReal x186=(x140+x139);
IkReal x187=(x130+x129+x48);
IkReal x188=(x175+x174);
IkReal x189=(x159+x158+x115);
IkReal x190=((0.00285813844400074)+x141+x142+x103);
IkReal x191=((0.00285946155599926)+x131+x132+x90);
IkReal x192=((0.000377954435616538)+x126+x125+x81);
IkReal x193=(x153+x152+x151+x150+x51);
IkReal x194=(x135+x137+x133+x138+x97);
IkReal x195=((((4.0)*py*x63))+(((4.0)*pz*x65))+((x69*x78))+(((0.0018)*pz*x56))+(((2.0)*x97)));
IkReal x196=(x127+x128+x88+x86+x87+x85);
IkReal x197=(x145+x135+x137+x133+x138);
IkReal x198=(x134+x136+x91+x93+x92+x96);
IkReal x199=(x143+x144+x110+x108+x109+x107);
IkReal x200=((-0.000378045564383462)+x156+x155+x113+x112+x111+x114);
IkReal x201=(x162+x163+x160+x161+x89);
IkReal x202=(x146+x147+x148+x149+x79+x82+x80);
IkReal x203=(x171+x170+x173+x172+x100+x101+x99);
IkReal x204=(x179+x178+x177+x176+x79+x82+x80);
IkReal x205=(x168+x169+x166+x167+x164+x165+x98);
IkReal x206=((((-1.0)*x195))+(((0.0233997633889877)*x57))+(((0.0233997633889877)*x53))+x193+(((0.0845021832553837)*r02)));
IkReal x207=((((-0.0207152869656065)*x57))+(((-0.0207152869656065)*x53))+(((-0.0641586743963529)*r02))+(((-1.0)*x193))+x195);
IkReal x208=((((-1.0)*x203))+x205+(((0.0700559767446163)*x53))+(((0.0700559767446163)*x57))+(((-0.169734876611012)*r02)));
IkReal x209=((((0.109032285603647)*x53))+(((0.109032285603647)*x57))+(((0.125635526965607)*r02))+(((-1.0)*x203))+x205);
IkReal x210=((((-1.0)*x185))+(((-1.0)*x198))+(((-1.0)*x197))+x191+x187+x180);
IkReal x211=((((-1.0)*x199))+(((-1.0)*x197))+x190+x187+x180+x183+(((-1.0)*x50)));
IkReal x212=((((-1.0)*x187))+(((-1.0)*x186))+(((-1.0)*x198))+x191+x194+x185);
IkReal x213=((((-1.0)*x187))+(((-1.0)*x186))+(((-1.0)*x183))+(((-1.0)*x199))+x190+x194+x50);
IkReal x214=((((-1.0)*x47))+(((-1.0)*x188))+(((-1.0)*x196))+x192+x181+(((-1.0)*x201))+x202);
IkReal x215=((((-1.0)*x189))+(((-1.0)*x188))+x182+(((-1.0)*x201))+x202+x200+(((-1.0)*x52)));
IkReal x216=((((-1.0)*x181))+(((-1.0)*x196))+x192+x184+(((-1.0)*x204))+x201+x47);
IkReal x217=((((-1.0)*x182))+(((-1.0)*x189))+x184+(((-1.0)*x204))+x201+x200+x52);
IkReal gconst0=x216;
IkReal gconst1=x206;
IkReal gconst2=x214;
IkReal gconst3=x212;
IkReal gconst4=x208;
IkReal gconst5=x210;
IkReal gconst6=x216;
IkReal gconst7=x206;
IkReal gconst8=x214;
IkReal gconst9=x212;
IkReal gconst10=x208;
IkReal gconst11=x210;
IkReal gconst12=x213;
IkReal gconst13=x209;
IkReal gconst14=x211;
IkReal gconst15=x215;
IkReal gconst16=x207;
IkReal gconst17=x217;
IkReal gconst18=x213;
IkReal gconst19=x209;
IkReal gconst20=x211;
IkReal gconst21=x215;
IkReal gconst22=x207;
IkReal gconst23=x217;
IkReal x218=((1.0)*gconst21);
IkReal x219=(gconst14*gconst20);
IkReal x220=(gconst13*gconst17);
IkReal x221=(gconst14*gconst4);
IkReal x222=(gconst18*gconst22);
IkReal x223=(gconst20*gconst21);
IkReal x224=(gconst0*gconst17);
IkReal x225=(gconst12*gconst5);
IkReal x226=(gconst21*gconst8);
IkReal x227=((1.0)*gconst9);
IkReal x228=(gconst15*gconst2);
IkReal x229=(gconst16*gconst2);
IkReal x230=(gconst10*gconst18);
IkReal x231=(gconst1*gconst17);
IkReal x232=(gconst2*gconst3);
IkReal x233=(gconst2*gconst4);
IkReal x234=(gconst19*gconst21);
IkReal x235=(gconst19*gconst5);
IkReal x236=(gconst11*gconst6);
IkReal x237=(gconst12*gconst17);
IkReal x238=(gconst8*gconst9);
IkReal x239=(gconst7*gconst9);
IkReal x240=(gconst14*gconst3);
IkReal x241=(gconst14*gconst15);
IkReal x242=(gconst23*gconst6);
IkReal x243=(gconst14*gconst16);
IkReal x244=(gconst10*gconst6);
IkReal x245=(gconst1*gconst5);
IkReal x246=(gconst18*gconst23);
IkReal x247=(gconst20*gconst9);
IkReal x248=(gconst13*gconst5);
IkReal x249=(gconst11*gconst18);
IkReal x250=(gconst21*gconst7);
IkReal x251=(gconst19*gconst9);
IkReal x252=(gconst0*gconst5);
IkReal x253=(gconst22*gconst6);
IkReal x254=((1.0)*x253);
IkReal x255=(gconst2*x251);
IkReal x256=(gconst7*x231);
IkReal x257=((1.0)*x252);
IkReal x258=(gconst23*x257);
op[0]=((((-1.0)*gconst15*x218*x219))+(((-1.0)*gconst19*x218*x220))+(((-1.0)*x222*x243))+(((-1.0)*x237*x246))+((x234*x243))+((x220*x222))+((x241*x246))+((x223*x237)));
op[1]=((((-1.0)*x224*x246))+((x240*x246))+((x229*x234))+(((-1.0)*x237*x242))+(((-1.0)*x237*x249))+((x237*x247))+(((-1.0)*gconst15*x219*x227))+((x228*x246))+((x226*x237))+(((-1.0)*x230*x243))+((x243*x251))+((x243*x250))+((x223*x225))+((x223*x224))+((x222*x231))+(((-1.0)*gconst13*x218*x235))+(((-1.0)*gconst19*x220*x227))+((x220*x253))+(((-1.0)*gconst20*x218*x228))+(((-1.0)*x222*x229))+((x241*x249))+((x241*x242))+(((-1.0)*gconst3*x218*x219))+(((-1.0)*gconst19*x218*x231))+((x221*x234))+(((-1.0)*x225*x246))+((x222*x248))+(((-1.0)*gconst7*x218*x220))+((x220*x230))+(((-1.0)*x221*x222))+(((-1.0)*x243*x254))+(((-1.0)*gconst8*x218*x241)));
op[2]=(((x224*x226))+(((-1.0)*gconst7*x218*x248))+(((-1.0)*gconst20*x227*x228))+((x237*x238))+(((-1.0)*x224*x249))+(((-1.0)*x224*x242))+(((-1.0)*gconst8*x227*x241))+(((-1.0)*x221*x230))+((x230*x248))+((x248*x253))+((x225*x226))+((x240*x242))+((x240*x249))+((x220*x244))+(((-1.0)*gconst20*x218*x232))+((x229*x250))+((x229*x251))+((x236*x241))+(((-1.0)*gconst1*x218*x235))+((x233*x234))+((x223*x252))+(((-1.0)*x229*x254))+((x228*x249))+((x228*x242))+((x224*x247))+((x230*x231))+(((-1.0)*x246*x257))+((x239*x243))+(((-1.0)*x229*x230))+(((-1.0)*gconst3*x219*x227))+((x232*x246))+(((-1.0)*x236*x237))+((x221*x250))+((x221*x251))+(((-1.0)*x218*x256))+(((-1.0)*x243*x244))+((x225*x247))+(((-1.0)*x225*x249))+(((-1.0)*x225*x242))+(((-1.0)*x221*x254))+(((-1.0)*gconst8*x218*x228))+((x222*x245))+(((-1.0)*gconst13*x227*x235))+(((-1.0)*x222*x233))+((x231*x253))+(((-1.0)*gconst19*x227*x231))+(((-1.0)*gconst7*x220*x227))+(((-1.0)*gconst8*x218*x240)));
op[3]=((((-1.0)*gconst7*x218*x245))+(((-1.0)*gconst8*x227*x240))+((x245*x253))+((x230*x245))+((x229*x239))+(((-1.0)*x230*x233))+(((-1.0)*x229*x244))+(((-1.0)*x227*x256))+((x228*x236))+(((-1.0)*x242*x257))+(((-1.0)*gconst1*x227*x235))+((x236*x240))+((x244*x248))+((x225*x238))+((x232*x242))+((x232*x249))+((x231*x244))+(((-1.0)*x249*x257))+((x224*x238))+((x221*x239))+(((-1.0)*x224*x236))+(((-1.0)*gconst20*x227*x232))+((x233*x250))+((x233*x251))+(((-1.0)*gconst8*x218*x232))+(((-1.0)*gconst8*x227*x228))+(((-1.0)*x233*x254))+(((-1.0)*x221*x244))+((x226*x252))+(((-1.0)*gconst7*x227*x248))+(((-1.0)*x225*x236))+((x247*x252)));
op[4]=(((x238*x252))+((x232*x236))+((x233*x239))+((x244*x245))+(((-1.0)*x233*x244))+(((-1.0)*gconst8*x227*x232))+(((-1.0)*x236*x257))+(((-1.0)*gconst7*x227*x245)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-0.00045)+(((0.007)*(IKsin(j4))))+(((-1.0)*px*sj0))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x259=cj4*cj4;
IkReal x260=sj2*sj2;
IkReal x261=cj2*cj2;
IkReal x262=sj2*sj2*sj2;
IkReal x263=cj2*cj2*cj2;
IkReal x264=(cj0*r00);
IkReal x265=(py*sj0);
IkReal x266=((3.06096)*r02);
IkReal x267=(r01*sj0);
IkReal x268=(cj0*px);
IkReal x269=((0.028)*r02);
IkReal x270=((1.53048)*r02);
IkReal x271=((0.0002)*r02);
IkReal x272=((4.0)*pz);
IkReal x273=((0.15)*x259);
IkReal x274=(cj4*x261);
IkReal x275=(cj4*x260);
IkReal x276=(x259*x261);
IkReal x277=(x259*x260);
IkReal x278=(x259*x262);
IkReal x279=(x271*x274);
IkReal x280=(x271*x275);
IkReal x281=((2.1696)*x278);
IkReal x282=((2.4504)*x276);
IkReal x283=(x263*x273);
IkReal x284=((2.4504)*x277);
IkReal x285=((0.8168)*x277);
IkReal x286=((0.8168)*x276);
IkReal x287=((0.7232)*x278);
IkReal x288=((0.05)*x259*x263);
IkReal x289=((0.76524)*x264*x275);
IkReal x290=((0.76524)*x267*x275);
IkReal x291=(x272*x277);
IkReal x292=((0.76524)*x267*x274);
IkReal x293=((0.76524)*x264*x274);
IkReal x294=(x272*x276);
IkReal x295=(x269*x277);
IkReal x296=((2.1696)*sj2*x276);
IkReal x297=(cj2*x260*x273);
IkReal x298=(x269*x276);
IkReal x299=((0.05)*cj2*x277);
IkReal x300=((0.7232)*sj2*x276);
IkReal x301=(x298+x295);
IkReal x302=(x300+x299+x288+x287+x286+x285);
IkReal x303=(x296+x297+x284+x283+x282+x281);
IkReal x304=(x290+x291+x292+x293+x294+x279+x289+x280);
IkReal x305=((((-0.056)*x264*x276))+(((-0.056)*x264*x277))+(((0.0004)*x264*x275))+(((0.0004)*x264*x274))+(((-0.056)*x267*x276))+(((-0.056)*x267*x277))+(((0.0004)*x267*x274))+(((0.0004)*x267*x275))+(((8.0)*x265*x276))+(((8.0)*x265*x277))+(((-1.0)*x270*x275))+(((-1.0)*x270*x274))+(((8.0)*x268*x277))+(((8.0)*x268*x276)));
op[0]=(x301+(((-1.0)*x302))+(((-1.0)*x304)));
op[1]=x305;
op[2]=(x301+(((-1.0)*x303))+(((-1.0)*x304)));
op[3]=((((-0.112)*x264*x276))+(((-0.112)*x264*x277))+(((0.0008)*x267*x275))+(((0.0008)*x267*x274))+(((16.0)*x268*x277))+(((16.0)*x268*x276))+(((16.0)*x265*x276))+(((16.0)*x265*x277))+(((-1.0)*x266*x275))+(((-1.0)*x266*x274))+(((-0.112)*x267*x276))+(((-0.112)*x267*x277))+(((0.0008)*x264*x275))+(((0.0008)*x264*x274)));
op[4]=(x304+(((-1.0)*x301))+(((-1.0)*x303)));
op[5]=x305;
op[6]=(x304+(((-1.0)*x301))+(((-1.0)*x302)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((htj1*htj1*htj1)*(((((0.112)*r02*(cj2*cj2)*(cj4*cj4)))+(((-3.06096)*cj0*cj4*r00*(cj2*cj2)))+(((-0.0008)*cj4*r02*(sj2*sj2)))+(((0.112)*r02*(cj4*cj4)*(sj2*sj2)))+(((-3.06096)*cj4*r01*sj0*(cj2*cj2)))+(((-3.06096)*cj4*r01*sj0*(sj2*sj2)))+(((-0.0008)*cj4*r02*(cj2*cj2)))+(((-16.0)*pz*(cj2*cj2)*(cj4*cj4)))+(((-3.06096)*cj0*cj4*r00*(sj2*sj2)))+(((-16.0)*pz*(cj4*cj4)*(sj2*sj2)))))))+(((-0.108)*(cj4*cj4)*(sj2*sj2)))+(((-0.028)*r01*sj0*(cj2*cj2)*(cj4*cj4)))+(((0.0002)*cj4*r01*sj0*(sj2*sj2)))+(((htj1*htj1*htj1*htj1)*(((((-0.0002)*cj4*r01*sj0*(cj2*cj2)))+(((-0.324)*(cj2*cj2)*(cj4*cj4)))+(((0.76524)*cj4*r02*(sj2*sj2)))+(((0.028)*r01*sj0*(cj4*cj4)*(sj2*sj2)))+(((0.15)*sj2*(cj2*cj2)*(cj4*cj4)))+(((-0.324)*(cj4*cj4)*(sj2*sj2)))+(((-0.0002)*cj0*cj4*r00*(sj2*sj2)))+(((0.15)*(cj4*cj4)*(sj2*sj2*sj2)))+(((-4.0)*py*sj0*(cj2*cj2)*(cj4*cj4)))+(((0.028)*cj0*r00*(cj2*cj2)*(cj4*cj4)))+(((0.028)*r01*sj0*(cj2*cj2)*(cj4*cj4)))+(((0.028)*cj0*r00*(cj4*cj4)*(sj2*sj2)))+(((-4.0)*py*sj0*(cj4*cj4)*(sj2*sj2)))+(((-2.1696)*(cj2*cj2*cj2)*(cj4*cj4)))+(((-4.0)*cj0*px*(cj4*cj4)*(sj2*sj2)))+(((-2.1696)*cj2*(cj4*cj4)*(sj2*sj2)))+(((-4.0)*cj0*px*(cj2*cj2)*(cj4*cj4)))+(((-0.0002)*cj0*cj4*r00*(cj2*cj2)))+(((-0.0002)*cj4*r01*sj0*(sj2*sj2)))+(((0.76524)*cj4*r02*(cj2*cj2)))))))+(((-0.7232)*cj2*(cj4*cj4)*(sj2*sj2)))+(((0.05)*(cj4*cj4)*(sj2*sj2*sj2)))+(((htj1*htj1*htj1*htj1*htj1)*(((((-1.53048)*cj0*cj4*r00*(cj2*cj2)))+(((0.056)*r02*(cj4*cj4)*(sj2*sj2)))+(((-0.0004)*cj4*r02*(cj2*cj2)))+(((-0.0004)*cj4*r02*(sj2*sj2)))+(((-1.53048)*cj4*r01*sj0*(cj2*cj2)))+(((-8.0)*pz*(cj4*cj4)*(sj2*sj2)))+(((-1.53048)*cj0*cj4*r00*(sj2*sj2)))+(((-8.0)*pz*(cj2*cj2)*(cj4*cj4)))+(((0.056)*r02*(cj2*cj2)*(cj4*cj4)))+(((-1.53048)*cj4*r01*sj0*(sj2*sj2)))))))+(((-0.108)*(cj2*cj2)*(cj4*cj4)))+(((0.0002)*cj0*cj4*r00*(sj2*sj2)))+(((4.0)*py*sj0*(cj4*cj4)*(sj2*sj2)))+(((-0.028)*r01*sj0*(cj4*cj4)*(sj2*sj2)))+(((htj1*htj1)*(((((-0.324)*(cj2*cj2)*(cj4*cj4)))+(((-0.028)*r01*sj0*(cj2*cj2)*(cj4*cj4)))+(((0.0002)*cj4*r01*sj0*(sj2*sj2)))+(((0.0002)*cj0*cj4*r00*(sj2*sj2)))+(((4.0)*py*sj0*(cj4*cj4)*(sj2*sj2)))+(((-0.028)*r01*sj0*(cj4*cj4)*(sj2*sj2)))+(((0.15)*sj2*(cj2*cj2)*(cj4*cj4)))+(((-0.324)*(cj4*cj4)*(sj2*sj2)))+(((0.15)*(cj4*cj4)*(sj2*sj2*sj2)))+(((4.0)*py*sj0*(cj2*cj2)*(cj4*cj4)))+(((-0.76524)*cj4*r02*(sj2*sj2)))+(((-2.1696)*(cj2*cj2*cj2)*(cj4*cj4)))+(((-2.1696)*cj2*(cj4*cj4)*(sj2*sj2)))+(((4.0)*cj0*px*(cj4*cj4)*(sj2*sj2)))+(((-0.028)*cj0*r00*(cj2*cj2)*(cj4*cj4)))+(((-0.028)*cj0*r00*(cj4*cj4)*(sj2*sj2)))+(((4.0)*cj0*px*(cj2*cj2)*(cj4*cj4)))+(((0.0002)*cj0*cj4*r00*(cj2*cj2)))+(((-0.76524)*cj4*r02*(cj2*cj2)))+(((0.0002)*cj4*r01*sj0*(cj2*cj2)))))))+(((4.0)*py*sj0*(cj2*cj2)*(cj4*cj4)))+(((-0.76524)*cj4*r02*(sj2*sj2)))+(((-0.7232)*(cj2*cj2*cj2)*(cj4*cj4)))+(((0.05)*sj2*(cj2*cj2)*(cj4*cj4)))+(((4.0)*cj0*px*(cj4*cj4)*(sj2*sj2)))+(((-0.028)*cj0*r00*(cj2*cj2)*(cj4*cj4)))+(((-0.028)*cj0*r00*(cj4*cj4)*(sj2*sj2)))+(((4.0)*cj0*px*(cj2*cj2)*(cj4*cj4)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-0.0002)*cj4*r01*sj0*(cj2*cj2)))+(((-0.108)*(cj4*cj4)*(sj2*sj2)))+(((0.76524)*cj4*r02*(sj2*sj2)))+(((-0.7232)*cj2*(cj4*cj4)*(sj2*sj2)))+(((0.05)*(cj4*cj4)*(sj2*sj2*sj2)))+(((0.028)*r01*sj0*(cj4*cj4)*(sj2*sj2)))+(((-0.108)*(cj2*cj2)*(cj4*cj4)))+(((-0.0002)*cj0*cj4*r00*(sj2*sj2)))+(((-4.0)*py*sj0*(cj2*cj2)*(cj4*cj4)))+(((0.028)*cj0*r00*(cj2*cj2)*(cj4*cj4)))+(((0.028)*r01*sj0*(cj2*cj2)*(cj4*cj4)))+(((0.028)*cj0*r00*(cj4*cj4)*(sj2*sj2)))+(((-4.0)*py*sj0*(cj4*cj4)*(sj2*sj2)))+(((-0.7232)*(cj2*cj2*cj2)*(cj4*cj4)))+(((-4.0)*cj0*px*(cj4*cj4)*(sj2*sj2)))+(((0.05)*sj2*(cj2*cj2)*(cj4*cj4)))+(((-4.0)*cj0*px*(cj2*cj2)*(cj4*cj4)))+(((-0.0002)*cj0*cj4*r00*(cj2*cj2)))+(((-0.0002)*cj4*r01*sj0*(sj2*sj2)))+(((0.76524)*cj4*r02*(cj2*cj2)))))))+((htj1*(((((-1.53048)*cj0*cj4*r00*(cj2*cj2)))+(((0.056)*r02*(cj4*cj4)*(sj2*sj2)))+(((-0.0004)*cj4*r02*(cj2*cj2)))+(((-0.0004)*cj4*r02*(sj2*sj2)))+(((-1.53048)*cj4*r01*sj0*(cj2*cj2)))+(((-8.0)*pz*(cj4*cj4)*(sj2*sj2)))+(((-1.53048)*cj0*cj4*r00*(sj2*sj2)))+(((-8.0)*pz*(cj2*cj2)*(cj4*cj4)))+(((0.056)*r02*(cj2*cj2)*(cj4*cj4)))+(((-1.53048)*cj4*r01*sj0*(sj2*sj2)))))))+(((0.0002)*cj0*cj4*r00*(cj2*cj2)))+(((-0.76524)*cj4*r02*(cj2*cj2)))+(((0.0002)*cj4*r01*sj0*(cj2*cj2))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x306=cj4*cj4;
j3eval[0]=((((-1.0)*x306))+(((0.00714285714285714)*cj4)));
j3eval[1]=IKsign(((((5.0e-5)*cj4))+(((-0.007)*x306))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x307=cj4*cj4;
j3eval[0]=((((140.0)*x307))+(((-1.0)*cj4)));
j3eval[1]=IKsign(((((-5.0e-5)*cj4))+(((0.007)*x307))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x308=((5.2271179326386)*sj1);
IkReal x309=(pz*sj2);
IkReal x310=(cj0*px);
IkReal x311=((5.2271179326386)*cj1);
IkReal x312=(cj2*pz);
IkReal x313=((0.00136613818740228)*sj1);
IkReal x314=((0.00136613818740228)*cj1);
IkReal x315=(py*sj0*sj2);
IkReal x316=(cj2*py*sj0);
if( IKabs(((-0.0655859719422648)+((cj2*x308*x310))+(((-1.06741436757586)*cj2))+(((-1.0)*x312*x313))+(((-1.0)*sj2*x310*x311))+((x308*x316))+((x309*x314))+((x308*x309))+((sj2*x310*x313))+((x311*x312))+(((0.140853218763375)*sj2))+((cj2*x310*x314))+((x314*x316))+(((-1.0)*x311*x315))+((x313*x315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.945045845493716)+(((-1.0)*x313*x316))+(((-1.0)*x312*x314))+(((-1.0)*cj2*x310*x313))+((x308*x315))+(((-1.0)*x308*x312))+(((-0.140853218763375)*cj2))+((x309*x311))+(((-1.06741436757586)*sj2))+((sj2*x308*x310))+((sj2*x310*x314))+((x311*x316))+((cj2*x310*x311))+(((-1.0)*x309*x313))+((x314*x315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0655859719422648)+((cj2*x308*x310))+(((-1.06741436757586)*cj2))+(((-1.0)*x312*x313))+(((-1.0)*sj2*x310*x311))+((x308*x316))+((x309*x314))+((x308*x309))+((sj2*x310*x313))+((x311*x312))+(((0.140853218763375)*sj2))+((cj2*x310*x314))+((x314*x316))+(((-1.0)*x311*x315))+((x313*x315))))+IKsqr(((-0.945045845493716)+(((-1.0)*x313*x316))+(((-1.0)*x312*x314))+(((-1.0)*cj2*x310*x313))+((x308*x315))+(((-1.0)*x308*x312))+(((-0.140853218763375)*cj2))+((x309*x311))+(((-1.06741436757586)*sj2))+((sj2*x308*x310))+((sj2*x310*x314))+((x311*x316))+((cj2*x310*x311))+(((-1.0)*x309*x313))+((x314*x315))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.0655859719422648)+((cj2*x308*x310))+(((-1.06741436757586)*cj2))+(((-1.0)*x312*x313))+(((-1.0)*sj2*x310*x311))+((x308*x316))+((x309*x314))+((x308*x309))+((sj2*x310*x313))+((x311*x312))+(((0.140853218763375)*sj2))+((cj2*x310*x314))+((x314*x316))+(((-1.0)*x311*x315))+((x313*x315))), ((-0.945045845493716)+(((-1.0)*x313*x316))+(((-1.0)*x312*x314))+(((-1.0)*cj2*x310*x313))+((x308*x315))+(((-1.0)*x308*x312))+(((-0.140853218763375)*cj2))+((x309*x311))+(((-1.06741436757586)*sj2))+((sj2*x308*x310))+((sj2*x310*x314))+((x311*x316))+((cj2*x310*x311))+(((-1.0)*x309*x313))+((x314*x315))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x317=IKcos(j3);
IkReal x318=IKsin(j3);
IkReal x319=((0.1808)*sj2);
IkReal x320=((0.0125)*cj2);
IkReal x321=((0.1808)*cj2);
IkReal x322=((0.0125)*sj2);
IkReal x323=px*px;
IkReal x324=pz*pz;
IkReal x325=py*py;
IkReal x326=(r00*sj1);
IkReal x327=((1.0)*cj1);
IkReal x328=(cj0*r01);
IkReal x329=(pz*sj0);
IkReal x330=(r01*sj1);
IkReal x331=((2.0)*py);
IkReal x332=((0.19131)*sj2);
IkReal x333=(px*r02);
IkReal x334=((1.0)*sj0);
IkReal x335=((0.4084)*cj0);
IkReal x336=(cj1*r00);
IkReal x337=(cj1*r02);
IkReal x338=(cj1*sj0);
IkReal x339=((0.054)*pz);
IkReal x340=(r02*sj1);
IkReal x341=(r00*sj0);
IkReal x342=(cj0*r00);
IkReal x343=(py*r01);
IkReal x344=((0.4084)*py);
IkReal x345=((0.19131)*cj2);
IkReal x346=(px*sj1);
IkReal x347=(cj0*py);
IkReal x348=(r02*sj0);
IkReal x349=((0.0393)*px);
IkReal x350=(cj1*r01);
IkReal x351=(cj1*pz);
IkReal x352=((0.0110268)*cj0);
IkReal x353=((0.4084)*px);
IkReal x354=(px*sj0);
IkReal x355=(pz*sj1);
IkReal x356=((2.0)*cj0);
IkReal x357=((0.01965)*cj0);
IkReal x358=((0.0393)*py);
IkReal x359=((0.054)*cj0);
IkReal x360=(sj0*sj1);
IkReal x361=((1.0)*cj0);
IkReal x362=(cj1*px);
IkReal x363=(pz*r02);
IkReal x364=((0.054)*py);
IkReal x365=((0.054)*px);
IkReal x366=((0.069176446)*x317);
IkReal x367=((0.00480083)*x318);
IkReal x368=(r01*x324);
IkReal x369=(r00*x325);
IkReal x370=((0.005012322)*x317);
IkReal x371=((0.0393)*x347);
IkReal x372=(sj2*x318);
IkReal x373=((1.31e-6)*x317);
IkReal x374=((1.0)*x325);
IkReal x375=(cj2*x318);
IkReal x376=((1.0)*x324);
IkReal x377=((5.0e-5)*x317);
IkReal x378=(cj0*x323);
IkReal x379=((2.0)*px*pz);
IkReal x380=(cj2*x377);
IkReal x381=(x317*x332);
IkReal x382=(x318*x345);
IkReal x383=((5.0e-5)*x372);
IkReal x384=((5.0e-5)*x375);
IkReal x385=(sj2*x377);
IkReal x386=(x317*x345);
IkReal x387=(x318*x332);
IkReal x388=(x366+x367);
IkReal x389=(x322+x387);
IkReal x390=(x321+x386+x384+x385);
IkReal x391=(x320+x319+x382+x383+x381);
evalcond[0]=((0.027)+(((-1.0)*cj0*px*x327))+x355+x390+(((-1.0)*x389))+(((-1.0)*py*sj0*x327)));
evalcond[1]=((0.2042)+(((-1.0)*py*sj1*x334))+x391+(((-1.0)*x380))+(((-1.0)*x346*x361))+(((-1.0)*pz*x327)));
evalcond[2]=((0.0268032561)+((x335*x346))+(((0.4084)*x351))+((x338*x364))+(((-1.0)*x374))+(((-1.0)*x376))+(((-1.0)*x371))+(((-1.0)*x323))+((x344*x360))+((x359*x362))+x388+((sj0*x349))+(((-1.0)*sj1*x339)));
evalcond[3]=((((0.01965)*x337))+(((-0.2042)*x341))+((x326*x357))+(((-1.0)*x391))+(((-1.0)*px*x330))+((x337*x347))+(((0.2042)*x328))+((py*x326))+(((0.01965)*sj0*x330))+x380+((x329*x336))+(((-1.0)*pz*x327*x328))+(((-1.0)*sj0*x327*x333)));
evalcond[4]=((((-1.0)*py*r00*x327))+((px*x350))+((x326*x329))+(((-1.0)*sj1*x333*x334))+(((0.01965)*x340))+x390+(((-1.0)*x389))+(((-1.0)*x336*x357))+(((-0.01965)*r01*x338))+((x340*x347))+(((-0.027)*x328))+(((-1.0)*x328*x355))+(((0.027)*x341)));
evalcond[5]=((0.0692727986)+(((-0.0010611)*x340))+(((0.054)*x333*x360))+((x323*x328))+(((-0.0393)*x343))+((sj1*x328*x339))+((x326*x344))+(((-1.0)*x330*x353))+((py*x335*x337))+(((-1.0)*x350*x365))+(((-0.054)*x326*x329))+(((-0.4084)*x333*x338))+(((2.0)*x329*x333))+(((0.0010611)*cj0*x336))+(((0.00802506)*cj0*x326))+(((0.00802506)*sj0*x330))+(((0.0420405175)*x328))+x388+(((-0.0420405175)*x341))+(((-1.0)*px*x331*x342))+(((-0.0393)*x363))+((x324*x328))+(((-1.0)*cj0*x331*x363))+(((-0.054)*x340*x347))+(((0.4084)*x329*x336))+(((0.0010611)*r01*x338))+(((0.00802506)*x337))+((x323*x341))+(((-0.4084)*x328*x351))+(((-1.0)*x328*x374))+(((-1.0)*r00*x349))+(((-1.0)*r00*x324*x334))+(((-1.0)*x334*x369))+((r01*x331*x354))+((x336*x364)));
evalcond[6]=((((-0.0413547625)*cj0*x336))+((r01*x325*x338))+(((-1.0)*x324*x327*x342))+((pz*r00*x335))+(((-0.0010611)*x328))+((x326*x352))+(((-0.054)*x343))+((x325*x340))+(((-1.0)*x333*x335))+(((-0.0393)*x328*x355))+(((-1.0)*r00*x365))+((x340*x371))+(((-0.0003275)*sj2))+(((0.0110268)*x337))+((x333*x351*x356))+(((-0.005012322)*x372))+((x331*x336*x354))+(((-1.0)*r01*sj0*x323*x327))+(((1.31e-6)*x375))+(((-1.0)*x344*x348))+(((0.0393)*x326*x329))+(((-1.0)*pz*x330*x331))+(((-1.0)*x340*x376))+(((0.4084)*r01*x329))+(((-1.0)*r02*x339))+(((0.0010611)*x341))+((x323*x340))+((x349*x350))+(((-1.0)*x325*x327*x342))+((sj2*x373))+(((-0.0393)*x333*x360))+((x329*x331*x337))+(((-1.0)*x326*x379))+(((-1.0)*x336*x358))+((cj2*x370))+(((0.0413547625)*x340))+(((-0.0413547625)*r01*x338))+((x336*x378))+(((0.0110268)*sj0*x330))+((x328*x331*x362))+(((-1.0)*sj0*x327*x368))+(((0.00473696)*cj2)));
evalcond[7]=((((-1.0)*r02*x325*x327))+(((-0.0393)*x329*x336))+(((0.0405825175)*x337))+((x329*x331*x340))+((pz*x331*x350))+(((0.0393)*x333*x338))+((x326*x378))+(((-1.0)*x325*x326*x361))+(((0.0405825175)*sj0*x330))+(((-1.0)*x326*x358))+(((0.00802506)*x341))+(((0.0405825175)*cj0*x326))+((x324*x337))+(((0.0003275)*cj2))+((x328*x331*x346))+(((-1.0)*x324*x330*x334))+((x326*x331*x354))+((x336*x352))+(((-1.0)*x324*x326*x361))+(((1.31e-6)*x372))+(((0.005012322)*x375))+(((-0.4084)*x363))+((sj0*x325*x330))+(((-1.0)*x323*x330*x334))+(((0.0393)*x328*x351))+(((0.00473696)*sj2))+(((-1.0)*r00*x353))+((sj2*x370))+(((-0.00802506)*x328))+(((-1.0)*x337*x371))+(((-1.0)*r02*x323*x327))+((x348*x364))+((x333*x359))+(((-0.0110268)*x340))+(((-1.0)*cj2*x373))+((x336*x379))+(((-1.0)*x339*x342))+((x330*x349))+(((-0.4084)*x343))+(((0.0110268)*r01*x338))+((x333*x355*x356))+(((-0.054)*r01*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x392=((5.2271179326386)*sj1);
IkReal x393=(pz*sj2);
IkReal x394=(cj0*px);
IkReal x395=((5.2271179326386)*cj1);
IkReal x396=(cj2*pz);
IkReal x397=((0.00136613818740228)*sj1);
IkReal x398=((0.00136613818740228)*cj1);
IkReal x399=(py*sj0*sj2);
IkReal x400=(cj2*py*sj0);
if( IKabs(((-0.0655859719422648)+(((-1.06741436757586)*cj2))+((x392*x400))+((x395*x396))+((cj2*x392*x394))+(((-1.0)*sj2*x394*x395))+(((-1.0)*x395*x399))+((cj2*x394*x398))+((sj2*x394*x397))+((x397*x399))+(((0.140853218763375)*sj2))+(((-1.0)*x396*x397))+((x398*x400))+((x393*x398))+((x392*x393)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.945045845493716)+((x398*x399))+(((-0.140853218763375)*cj2))+(((-1.06741436757586)*sj2))+((cj2*x394*x395))+((sj2*x394*x398))+(((-1.0)*x396*x398))+(((-1.0)*x397*x400))+((x395*x400))+((sj2*x392*x394))+(((-1.0)*x393*x397))+(((-1.0)*cj2*x394*x397))+(((-1.0)*x392*x396))+((x393*x395))+((x392*x399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0655859719422648)+(((-1.06741436757586)*cj2))+((x392*x400))+((x395*x396))+((cj2*x392*x394))+(((-1.0)*sj2*x394*x395))+(((-1.0)*x395*x399))+((cj2*x394*x398))+((sj2*x394*x397))+((x397*x399))+(((0.140853218763375)*sj2))+(((-1.0)*x396*x397))+((x398*x400))+((x393*x398))+((x392*x393))))+IKsqr(((-0.945045845493716)+((x398*x399))+(((-0.140853218763375)*cj2))+(((-1.06741436757586)*sj2))+((cj2*x394*x395))+((sj2*x394*x398))+(((-1.0)*x396*x398))+(((-1.0)*x397*x400))+((x395*x400))+((sj2*x392*x394))+(((-1.0)*x393*x397))+(((-1.0)*cj2*x394*x397))+(((-1.0)*x392*x396))+((x393*x395))+((x392*x399))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.0655859719422648)+(((-1.06741436757586)*cj2))+((x392*x400))+((x395*x396))+((cj2*x392*x394))+(((-1.0)*sj2*x394*x395))+(((-1.0)*x395*x399))+((cj2*x394*x398))+((sj2*x394*x397))+((x397*x399))+(((0.140853218763375)*sj2))+(((-1.0)*x396*x397))+((x398*x400))+((x393*x398))+((x392*x393))), ((-0.945045845493716)+((x398*x399))+(((-0.140853218763375)*cj2))+(((-1.06741436757586)*sj2))+((cj2*x394*x395))+((sj2*x394*x398))+(((-1.0)*x396*x398))+(((-1.0)*x397*x400))+((x395*x400))+((sj2*x392*x394))+(((-1.0)*x393*x397))+(((-1.0)*cj2*x394*x397))+(((-1.0)*x392*x396))+((x393*x395))+((x392*x399))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x401=IKcos(j3);
IkReal x402=IKsin(j3);
IkReal x403=((0.1808)*sj2);
IkReal x404=((0.0125)*cj2);
IkReal x405=((0.0125)*sj2);
IkReal x406=((0.1808)*cj2);
IkReal x407=px*px;
IkReal x408=pz*pz;
IkReal x409=py*py;
IkReal x410=(r00*sj1);
IkReal x411=((1.0)*cj1);
IkReal x412=(cj0*r01);
IkReal x413=(pz*sj0);
IkReal x414=(r01*sj1);
IkReal x415=((2.0)*pz);
IkReal x416=(px*r02);
IkReal x417=((1.0)*sj0);
IkReal x418=((0.4084)*cj0);
IkReal x419=(cj1*r00);
IkReal x420=(cj1*r02);
IkReal x421=(cj1*sj0);
IkReal x422=((0.054)*pz);
IkReal x423=(r00*sj0);
IkReal x424=(cj0*r00);
IkReal x425=(r02*sj1);
IkReal x426=((0.0393)*py);
IkReal x427=((0.4084)*py);
IkReal x428=(px*sj1);
IkReal x429=(cj0*py);
IkReal x430=(r02*sj0);
IkReal x431=((0.0393)*px);
IkReal x432=(cj1*r01);
IkReal x433=(cj1*pz);
IkReal x434=((0.0110268)*cj0);
IkReal x435=((0.4084)*px);
IkReal x436=((0.01965)*cj0);
IkReal x437=((0.054)*cj0);
IkReal x438=((0.054)*py);
IkReal x439=(sj0*sj1);
IkReal x440=((1.0)*cj0);
IkReal x441=(cj1*px);
IkReal x442=(pz*r02);
IkReal x443=((2.0)*py);
IkReal x444=(pz*sj1);
IkReal x445=((0.054)*px);
IkReal x446=((0.069176446)*x401);
IkReal x447=((0.00480083)*x402);
IkReal x448=(r01*x408);
IkReal x449=(cj2*x401);
IkReal x450=(r00*x409);
IkReal x451=(sj2*x401);
IkReal x452=(sj2*x402);
IkReal x453=(cj2*x402);
IkReal x454=((1.0)*x409);
IkReal x455=((1.0)*x408);
IkReal x456=(cj0*x407);
IkReal x457=((0.19131)*x451);
IkReal x458=((0.19131)*x453);
IkReal x459=((5.0e-5)*x452);
IkReal x460=((5.0e-5)*x449);
IkReal x461=((0.19131)*x452);
IkReal x462=((5.0e-5)*x453);
IkReal x463=((5.0e-5)*x451);
IkReal x464=((0.19131)*x449);
IkReal x465=(px*sj0*x443);
IkReal x466=(x405+x461);
IkReal x467=(x447+x446);
IkReal x468=(x406+x463+x462+x464);
IkReal x469=(x403+x404+x458+x459+x457);
evalcond[0]=((0.027)+(((-1.0)*cj0*px*x411))+(((-1.0)*py*sj0*x411))+(((-1.0)*x466))+x444+x468);
evalcond[1]=((0.2042)+(((-1.0)*py*sj1*x417))+(((-1.0)*x460))+x469+(((-1.0)*x428*x440))+(((-1.0)*pz*x411)));
evalcond[2]=((0.0273660561)+((sj0*x431))+((x421*x438))+(((-1.0)*sj1*x422))+(((0.4084)*x433))+((x418*x428))+(((-1.0)*x455))+(((-1.0)*x454))+x467+(((-1.0)*cj0*x426))+((x437*x441))+(((-1.0)*x407))+((x427*x439)));
evalcond[3]=(((x420*x429))+((py*x410))+(((-1.0)*pz*x411*x412))+((x413*x419))+(((-1.0)*sj0*x411*x416))+(((-0.2042)*x423))+((x410*x436))+(((-1.0)*x460))+x469+(((-1.0)*px*x414))+(((0.2042)*x412))+(((0.01965)*x420))+(((0.01965)*sj0*x414)));
evalcond[4]=(((px*x432))+((x425*x429))+((x410*x413))+(((-0.01965)*r01*x421))+(((-0.027)*x412))+(((-1.0)*x468))+(((-1.0)*py*r00*x411))+(((0.027)*x423))+x466+(((0.01965)*x425))+(((-1.0)*sj1*x416*x417))+(((-1.0)*x412*x444))+(((-1.0)*x419*x436)));
evalcond[5]=((-0.0687099986)+((x407*x412))+(((0.00802506)*sj0*x414))+(((-0.0393)*x442))+(((-0.054)*x410*x413))+((x410*x427))+(((-1.0)*x432*x445))+(((-0.054)*x425*x429))+(((0.0010611)*r01*x421))+(((-1.0)*x417*x450))+((x408*x412))+((py*x418*x420))+(((-1.0)*x467))+(((0.0420405175)*x412))+(((-0.4084)*x412*x433))+(((0.4084)*x413*x419))+(((0.00802506)*x420))+(((0.054)*x416*x439))+(((0.00802506)*cj0*x410))+((x419*x438))+((x407*x423))+(((-1.0)*r01*x426))+(((-1.0)*r00*x408*x417))+(((-0.4084)*x416*x421))+(((-0.0420405175)*x423))+(((-1.0)*x414*x435))+(((-0.0010611)*x425))+(((-1.0)*r00*x431))+(((-1.0)*r02*x415*x429))+((sj1*x412*x422))+(((-1.0)*x412*x454))+((r01*x465))+(((0.0010611)*cj0*x419))+(((-1.0)*px*x424*x443))+(((2.0)*x413*x416)));
evalcond[6]=((((-0.0393)*x412*x444))+(((0.4084)*r01*x413))+(((-0.0413547625)*cj0*x419))+(((-1.0)*x427*x430))+((x419*x456))+(((-1.0)*x409*x411*x424))+(((-1.0)*py*x414*x415))+((x419*x465))+(((-1.0)*px*x410*x415))+((x412*x441*x443))+((x410*x434))+((pz*r00*x418))+((x409*x425))+(((-2.71e-6)*x453))+(((-2.71e-6)*x451))+((cj0*x425*x426))+(((-0.0413547625)*r01*x421))+(((0.0110268)*sj0*x414))+(((-1.0)*r02*x422))+(((0.0393)*x410*x413))+((x413*x420*x443))+(((0.0010611)*x423))+((x407*x425))+(((-1.0)*x416*x418))+(((0.0413547625)*x425))+(((-1.0)*sj0*x411*x448))+(((-0.0393)*x416*x439))+(((-0.010369002)*x449))+(((-1.0)*x419*x426))+((x431*x432))+(((-1.0)*r01*sj0*x407*x411))+((cj0*cj1*x415*x416))+(((-1.0)*r00*x445))+(((0.010369002)*x452))+(((-0.0010611)*x412))+(((-1.0)*r01*x438))+(((0.0110268)*x420))+(((-0.00979936)*cj2))+((r01*x409*x421))+(((0.0006775)*sj2))+(((-1.0)*x425*x455))+(((-1.0)*x408*x411*x424)));
evalcond[7]=((((-1.0)*x422*x424))+(((-0.010369002)*x451))+(((-0.010369002)*x453))+((x414*x431))+(((-1.0)*x407*x414*x417))+(((0.0110268)*r01*x421))+(((-0.054)*r01*x413))+(((-1.0)*x408*x414*x417))+(((-1.0)*r02*x409*x411))+((cj0*sj1*x415*x416))+((x416*x437))+(((0.0405825175)*sj0*x414))+((px*x415*x419))+(((-0.0110268)*x425))+(((0.0405825175)*cj0*x410))+(((-0.0393)*x413*x419))+(((-2.71e-6)*x452))+(((-0.00802506)*x412))+(((-0.00979936)*sj2))+((x408*x420))+(((0.00802506)*x423))+((sj0*x409*x414))+(((0.0393)*x412*x433))+((x410*x456))+((x419*x434))+(((-1.0)*r01*x427))+((x410*x465))+(((-1.0)*r02*x407*x411))+(((-0.0006775)*cj2))+((x430*x438))+(((-1.0)*x408*x410*x440))+(((-1.0)*r00*x435))+(((2.71e-6)*x449))+(((-1.0)*cj0*x420*x426))+((x412*x428*x443))+(((0.0405825175)*x420))+(((-0.4084)*x442))+(((-1.0)*x410*x426))+((x413*x425*x443))+((py*x415*x432))+(((0.0393)*x416*x421))+(((-1.0)*x409*x410*x440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x470=cj2*cj2;
IkReal x471=(sj1*sj2);
IkReal x472=(cj0*cj4);
IkReal x473=((5.0e-5)*r02);
IkReal x474=((5.0e-5)*sj2);
IkReal x475=((0.19131)*cj2);
IkReal x476=((0.007)*cj4);
IkReal x477=(cj1*r00);
IkReal x478=((0.0125)*cj4);
IkReal x479=(cj2*sj1);
IkReal x480=(cj2*sj2);
IkReal x481=((0.1808)*cj4);
IkReal x482=((5.0e-5)*cj2);
IkReal x483=((0.19131)*sj2);
IkReal x484=(cj4*sj2);
IkReal x485=(cj1*pz);
IkReal x486=(cj2*cj4);
IkReal x487=(cj1*r01*sj0);
IkReal x488=(cj4*py*sj0);
CheckValue<IkReal> x489=IKPowWithIntegerCheck(IKsign((((cj4*x476))+(((-5.0e-5)*cj4)))),-1);
if(!x489.valid){
continue;
}
CheckValue<IkReal> x490 = IKatan2WithCheck(IkReal((((cj0*x477*x482))+(((-1.0)*x483*x487))+((r02*x476*x479))+(((-1.0)*x470*x481))+(((-1.0)*px*x471*x472))+(((-0.007)*cj2*x472*x477))+(((-1.0)*x471*x488))+(((-1.0)*cj0*x477*x483))+(((-1.0)*x473*x479))+(((0.19131)*r02*x471))+(((-1.0)*x484*x485))+((x478*x480))+x481+(((-1.0)*cj2*x476*x487))+((x482*x487))+(((0.2042)*x484)))),IkReal((((x485*x486))+(((-0.007)*sj2*x472*x477))+(((-1.0)*r02*sj1*x475))+((x475*x487))+(((-0.2042)*x486))+((r02*x471*x476))+((x474*x487))+(((-1.0)*sj2*x476*x487))+((cj0*x475*x477))+(((-1.0)*x480*x481))+(((-1.0)*x471*x473))+((cj0*x474*x477))+((x479*x488))+(((-1.0)*x470*x478))+((px*x472*x479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x490.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x489.value)))+(x490.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x491=IKcos(j3);
IkReal x492=IKsin(j3);
IkReal x493=px*px;
IkReal x494=pz*pz;
IkReal x495=py*py;
IkReal x496=(cj2*cj4);
IkReal x497=(r01*sj0);
IkReal x498=((1.0)*sj1);
IkReal x499=(py*sj1);
IkReal x500=((0.0110268)*cj1);
IkReal x501=(r02*sj0);
IkReal x502=(cj0*r01);
IkReal x503=(sj2*sj4);
IkReal x504=(cj1*r00);
IkReal x505=((1.0)*cj0);
IkReal x506=(cj2*sj4);
IkReal x507=((2.0)*pz);
IkReal x508=((0.19131)*sj2);
IkReal x509=(pz*sj0);
IkReal x510=(cj1*r02);
IkReal x511=((0.0405825175)*sj1);
IkReal x512=((0.054)*py);
IkReal x513=((1.0)*cj1);
IkReal x514=(cj4*sj2);
IkReal x515=((0.4084)*py);
IkReal x516=(r00*sj0);
IkReal x517=((0.054)*r00);
IkReal x518=(cj0*pz);
IkReal x519=(r02*sj1);
IkReal x520=((0.0393)*cj0);
IkReal x521=((0.0393)*r01);
IkReal x522=((0.4084)*r00);
IkReal x523=(cj1*px);
IkReal x524=((0.0110268)*sj1);
IkReal x525=(px*sj1);
IkReal x526=(cj0*py);
IkReal x527=(cj1*pz);
IkReal x528=((0.054)*pz);
IkReal x529=(cj0*r00);
IkReal x530=((1.0)*pz);
IkReal x531=((0.0393)*r00);
IkReal x532=(py*sj0);
IkReal x533=((2.0)*px);
IkReal x534=((0.00802506)*sj1);
IkReal x535=((0.01965)*sj1);
IkReal x536=((0.054)*cj0);
IkReal x537=((0.027)*sj1);
IkReal x538=((1.0)*py);
IkReal x539=((0.4084)*pz);
IkReal x540=(cj1*py);
IkReal x541=((0.2042)*sj1);
IkReal x542=((0.0393)*pz);
IkReal x543=(cj4*x491);
IkReal x544=((0.0201)*x492);
IkReal x545=((0.0044221336)*x492);
IkReal x546=(cj0*px*r02);
IkReal x547=((0.007)*x492);
IkReal x548=((0.069176446)*x491);
IkReal x549=((0.19131)*x491);
IkReal x550=(sj2*x491);
IkReal x551=((2.01e-6)*x491);
IkReal x552=((7.0e-7)*x492);
IkReal x553=(cj2*x491);
IkReal x554=((0.004539131)*x492);
IkReal x555=((1.0)*x492);
IkReal x556=((0.19131)*x492);
IkReal x557=(cj4*x492);
IkReal x558=((1.0)*x495);
IkReal x559=((0.007690662)*x491);
IkReal x560=((5.0e-5)*x491);
IkReal x561=((5.0e-5)*x492);
IkReal x562=((1.0)*x494);
IkReal x563=((2.01e-6)*x492);
IkReal x564=((0.007690662)*x492);
IkReal x565=((0.00267834)*x492);
IkReal x566=((0.00480083)*x492);
IkReal x567=((1.0)*x493);
evalcond[0]=(x519+(((-1.0)*x491*x514))+(((-1.0)*x496*x555))+(((-1.0)*x504*x505))+(((-1.0)*x497*x513)));
evalcond[1]=(((x491*x496))+(((-1.0)*x510))+(((-1.0)*x497*x498))+(((-1.0)*x498*x529))+(((-1.0)*x514*x555)));
evalcond[2]=((0.027)+(((5.0e-5)*x550))+((cj2*x561))+(((0.1808)*cj2))+(((-1.0)*x505*x523))+(((-0.007)*x491*x514))+(((-1.0)*x492*x508))+(((-1.0)*x513*x532))+((pz*sj1))+((cj2*x549))+(((-0.0125)*sj2))+(((-1.0)*x496*x547)));
evalcond[3]=((0.2042)+(((-1.0)*x514*x547))+(((0.007)*x491*x496))+(((0.1808)*sj2))+(((-5.0e-5)*x553))+((x491*x508))+(((0.0125)*cj2))+(((-1.0)*pz*x513))+(((-1.0)*cj0*px*x498))+(((-1.0)*x498*x532))+((cj2*x556))+((sj2*x561)));
evalcond[4]=((((-0.027)*x510))+(((-0.1808)*x543))+(((-1.0)*x497*x530))+(((-1.0)*x497*x537))+(((0.2042)*cj0*x504))+(((-1.0)*x529*x537))+(((0.2042)*cj1*x497))+(((-0.2042)*x519))+x546+(((-0.0125)*x557))+((py*x501))+(((-1.0)*pz*r00*x505))+(((-0.19131)*cj4)));
evalcond[5]=((0.007)+(((-0.027)*x519))+(((-1.0)*px*r00))+(((0.01965)*x516))+(((-1.0)*r01*x538))+(((-5.0e-5)*cj4))+(((-0.0201)*sj4))+(((0.027)*cj1*x497))+(((-1.0)*r02*x530))+(((0.027)*cj0*x504))+((x497*x541))+(((-0.01965)*x502))+(((0.0125)*x543))+((x529*x541))+(((0.2042)*x510))+(((-0.1808)*x557)));
evalcond[6]=((0.0270846561)+(((0.4084)*sj0*x499))+(((-1.0)*sj1*x528))+(((0.000175)*x543))+(((0.0393)*px*sj0))+((cj1*sj0*x512))+(((-0.0002814)*sj4))+(((0.4084)*x527))+(((-7.0e-7)*cj4))+(((-1.0)*x558))+x548+x566+(((-1.0)*py*x520))+((x523*x536))+(((-0.0025312)*x557))+(((0.4084)*cj0*x525))+(((-1.0)*x562))+(((-1.0)*x567)));
evalcond[7]=(((x506*x560))+(((0.01965)*x510))+(((-1.0)*x506*x556))+(((-1.0)*x503*x549))+(((0.2042)*x502))+(((-0.2042)*x516))+(((-0.1808)*x503))+((x497*x535))+((x514*x544))+((x510*x526))+(((-1.0)*px*x501*x513))+((r00*x499))+(((-1.0)*x503*x561))+(((-1.0)*pz*x502*x513))+((x529*x535))+((x504*x509))+(((-0.0125)*x506))+(((-1.0)*px*r01*x498))+(((-0.0201)*x491*x496)));
evalcond[8]=((((-0.0201)*x491*x514))+(((-0.01965)*cj1*x497))+(((0.1808)*x506))+((cj0*r02*x499))+((x506*x561))+(((-1.0)*x503*x556))+(((0.01965)*x519))+(((-1.0)*x504*x538))+(((-0.01965)*cj0*x504))+(((-0.027)*x502))+((x506*x549))+(((-1.0)*pz*x498*x502))+((r01*x523))+((x503*x560))+(((-0.0125)*x503))+(((-1.0)*x496*x544))+(((0.027)*x516))+(((-1.0)*px*x498*x501))+((r00*sj1*x509)));
evalcond[9]=((0.0002814)+(((0.0420405175)*x502))+((sj1*x502*x528))+((px*x501*x507))+(((-0.054)*r01*x523))+(((-0.4084)*r01*x525))+((x494*x502))+(((0.0010611)*cj1*x497))+((py*x497*x533))+(((-0.00726816)*x557))+((x504*x512))+((cj0*x510*x515))+(((0.054)*x501*x525))+(((0.00802506)*x510))+(((0.4084)*x504*x509))+(((-0.4084)*x501*x523))+(((-1.0)*px*x531))+(((-0.4084)*x502*x527))+((x493*x502))+(((-1.0)*sj1*x509*x517))+(((-1.0)*x516*x558))+((sj4*x566))+(((-1.0)*r02*x542))+(((-1.0)*r02*x507*x526))+(((-1.0)*r00*x526*x533))+(((-2.01e-6)*cj4))+(((-1.0)*py*x521))+(((0.0005025)*x543))+((x497*x534))+(((-0.0420405175)*x516))+(((-1.0)*x502*x558))+((x499*x522))+(((0.0689913986)*sj4))+(((-0.0010611)*x519))+(((0.0010611)*cj0*x504))+((sj4*x548))+((x529*x534))+(((-1.0)*x516*x562))+((x493*x516))+(((-1.0)*r02*x499*x536)));
evalcond[10]=((((0.069178946)*x496))+(((-1.0)*x494*x497*x498))+(((-1.0)*x514*x545))+(((-1.0)*x493*x497*x498))+(((0.0405825175)*x510))+((x501*x512))+((x499*x502*x533))+((sj1*x495*x497))+(((-1.0)*r01*x515))+(((-1.0)*x497*x528))+((x506*x564))+(((-1.0)*x494*x498*x529))+((x497*x500))+((x500*x529))+(((7.0e-7)*x553))+(((-1.0)*x495*x498*x529))+((r01*x507*x540))+((px*x504*x507))+(((0.0005025)*x506))+((x496*x554))+(((-0.000175)*cj2))+(((-1.0)*x510*x567))+((x503*x559))+(((-1.0)*x506*x551))+(((-0.004500869)*x491*x514))+(((0.00802506)*x516))+(((-1.0)*sj2*x552))+(((-1.0)*px*x522))+((cj0*px*x507*x519))+(((-1.0)*r02*x539))+(((0.0393)*x502*x527))+(((0.0694869136)*x491*x496))+(((-1.0)*x517*x518))+((x521*x525))+(((0.0393)*x501*x523))+((x499*x501*x507))+((x497*x511))+(((-0.00802506)*x502))+(((-0.00267834)*x550))+(((-1.0)*x499*x531))+((x494*x510))+(((-1.0)*x510*x558))+((sj1*x493*x529))+(((-0.0393)*x504*x509))+(((-0.00476467)*x514))+((px*r02*x536))+(((0.00726816)*x503))+((x511*x529))+(((-0.0025312)*sj2))+(((-0.0110268)*x519))+((x499*x516*x533))+((x503*x563))+(((-1.0)*cj2*x565))+(((-1.0)*py*x510*x520)));
evalcond[11]=((((-1.0)*r01*x499*x507))+(((-1.0)*x501*x515))+(((-1.0)*x493*x497*x513))+(((0.000175)*sj2))+(((-0.0005025)*x503))+(((-0.00476467)*x496))+((x504*x532*x533))+(((-1.0)*r01*x512))+(((-0.0025312)*cj2))+(((-1.0)*x495*x504*x505))+((x506*x563))+(((-1.0)*r00*x507*x525))+((x501*x507*x540))+(((-1.0)*x494*x504*x505))+(((-1.0)*px*x517))+(((-1.0)*cj2*x552))+((x503*x551))+(((-0.0010611)*x502))+(((-0.4084)*x546))+((cj0*px*x507*x510))+(((-0.0413547625)*cj1*x497))+((r02*x499*x520))+((sj1*x509*x531))+((x518*x522))+(((-0.0393)*x501*x525))+(((-1.0)*r02*x528))+((x521*x523))+(((-0.0694869136)*x491*x514))+((x524*x529))+((x506*x559))+((x497*x539))+(((-0.00267834)*x553))+((x497*x524))+(((-0.004500869)*x491*x496))+((cj1*x495*x497))+(((0.0010611)*x516))+(((-1.0)*sj1*x502*x542))+(((-7.0e-7)*x550))+(((0.0413547625)*x519))+((x495*x519))+(((-1.0)*x503*x564))+(((0.00726816)*x506))+(((-1.0)*x514*x554))+(((-1.0)*x494*x497*x513))+(((-0.0393)*py*x504))+((x493*x519))+((cj0*x493*x504))+(((-0.0413547625)*cj0*x504))+(((2.0)*py*x502*x523))+((sj2*x565))+(((-1.0)*x496*x545))+(((-1.0)*r02*x494*x498))+(((-0.069178946)*x514))+((r02*x500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x568=cj2*cj2;
IkReal x569=((0.007)*cj4);
IkReal x570=(cj1*sj2);
IkReal x571=(sj1*sj2);
IkReal x572=(r01*sj0);
IkReal x573=((0.0125)*cj4);
IkReal x574=(cj2*cj4);
IkReal x575=(cj0*r00);
IkReal x576=(py*sj0);
IkReal x577=(cj2*sj1);
IkReal x578=(cj0*px);
IkReal x579=(cj1*cj2*r02);
IkReal x580=((1.0)*cj4*pz);
CheckValue<IkReal> x581=IKPowWithIntegerCheck(IKsign(((((5.0e-5)*cj4))+(((-1.0)*cj4*x569)))),-1);
if(!x581.valid){
continue;
}
CheckValue<IkReal> x582 = IKatan2WithCheck(IkReal(((((-0.027)*x574))+(((-0.19131)*x579))+(((-5.0e-5)*r02*x570))+(((-0.19131)*x572*x577))+(((-5.0e-5)*x571*x572))+(((-5.0e-5)*x571*x575))+((cj2*sj2*x573))+((cj1*x574*x576))+((cj1*x574*x578))+((r02*x569*x570))+(((-1.0)*pz*sj1*x574))+((x569*x571*x572))+((x569*x571*x575))+(((-0.19131)*x575*x577))+(((-0.1808)*cj4*x568)))),IkReal(((((-0.027)*cj4*sj2))+(((5.0e-5)*x575*x577))+(((-1.0)*x569*x579))+(((-0.19131)*r02*x570))+(((-0.19131)*x571*x575))+(((-0.19131)*x571*x572))+(((-1.0)*x569*x575*x577))+(((-1.0)*x569*x572*x577))+(((5.0e-5)*x572*x577))+((cj4*x570*x578))+((cj4*x570*x576))+(((-1.0)*x571*x580))+(((-0.1808)*sj2*x574))+x573+(((-1.0)*x568*x573))+(((5.0e-5)*x579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x582.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x581.value)))+(x582.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x583=IKcos(j3);
IkReal x584=IKsin(j3);
IkReal x585=px*px;
IkReal x586=pz*pz;
IkReal x587=py*py;
IkReal x588=(cj2*cj4);
IkReal x589=(r01*sj0);
IkReal x590=((1.0)*sj1);
IkReal x591=(py*sj1);
IkReal x592=((0.0110268)*cj1);
IkReal x593=(r02*sj0);
IkReal x594=(cj0*r01);
IkReal x595=(sj2*sj4);
IkReal x596=(cj1*r00);
IkReal x597=((1.0)*cj0);
IkReal x598=(cj2*sj4);
IkReal x599=((2.0)*pz);
IkReal x600=((0.19131)*sj2);
IkReal x601=(pz*sj0);
IkReal x602=(cj1*r02);
IkReal x603=((0.0405825175)*sj1);
IkReal x604=((0.054)*py);
IkReal x605=((1.0)*cj1);
IkReal x606=(cj4*sj2);
IkReal x607=((0.4084)*py);
IkReal x608=(r00*sj0);
IkReal x609=((0.054)*r00);
IkReal x610=(cj0*pz);
IkReal x611=(r02*sj1);
IkReal x612=((0.0393)*cj0);
IkReal x613=((0.0393)*r01);
IkReal x614=((0.4084)*r00);
IkReal x615=(cj1*px);
IkReal x616=((0.0110268)*sj1);
IkReal x617=(px*sj1);
IkReal x618=(cj0*py);
IkReal x619=(cj1*pz);
IkReal x620=((0.054)*pz);
IkReal x621=(cj0*r00);
IkReal x622=((1.0)*pz);
IkReal x623=((0.0393)*r00);
IkReal x624=(py*sj0);
IkReal x625=((2.0)*px);
IkReal x626=((0.00802506)*sj1);
IkReal x627=((0.01965)*sj1);
IkReal x628=((0.054)*cj0);
IkReal x629=((0.027)*sj1);
IkReal x630=((1.0)*py);
IkReal x631=((0.4084)*pz);
IkReal x632=(cj1*py);
IkReal x633=((0.2042)*sj1);
IkReal x634=((0.0393)*pz);
IkReal x635=(cj4*x583);
IkReal x636=((0.0201)*x584);
IkReal x637=((0.0044221336)*x584);
IkReal x638=(cj0*px*r02);
IkReal x639=((0.007)*x584);
IkReal x640=((0.069176446)*x583);
IkReal x641=((0.19131)*x583);
IkReal x642=(sj2*x583);
IkReal x643=((2.01e-6)*x583);
IkReal x644=((7.0e-7)*x584);
IkReal x645=(cj2*x583);
IkReal x646=((0.004539131)*x584);
IkReal x647=((1.0)*x584);
IkReal x648=((0.19131)*x584);
IkReal x649=(cj4*x584);
IkReal x650=((1.0)*x587);
IkReal x651=((0.007690662)*x583);
IkReal x652=((5.0e-5)*x583);
IkReal x653=((5.0e-5)*x584);
IkReal x654=((1.0)*x586);
IkReal x655=((2.01e-6)*x584);
IkReal x656=((0.007690662)*x584);
IkReal x657=((0.00267834)*x584);
IkReal x658=((0.00480083)*x584);
IkReal x659=((1.0)*x585);
evalcond[0]=((((-1.0)*x583*x606))+(((-1.0)*x596*x597))+(((-1.0)*x589*x605))+x611+(((-1.0)*x588*x647)));
evalcond[1]=(((x583*x588))+(((-1.0)*x589*x590))+(((-1.0)*x590*x621))+(((-1.0)*x602))+(((-1.0)*x606*x647)));
evalcond[2]=((0.027)+(((-1.0)*x605*x624))+(((5.0e-5)*x642))+(((-1.0)*x597*x615))+(((-1.0)*x588*x639))+((cj2*x653))+(((0.1808)*cj2))+(((-0.007)*x583*x606))+((cj2*x641))+((pz*sj1))+(((-0.0125)*sj2))+(((-1.0)*x584*x600)));
evalcond[3]=((0.2042)+(((-1.0)*x590*x624))+(((-1.0)*x606*x639))+(((0.1808)*sj2))+((sj2*x653))+((cj2*x648))+(((0.0125)*cj2))+(((-1.0)*pz*x605))+(((-1.0)*cj0*px*x590))+((x583*x600))+(((0.007)*x583*x588))+(((-5.0e-5)*x645)));
evalcond[4]=((((0.2042)*cj1*x589))+(((-0.2042)*x611))+(((-1.0)*x621*x629))+((py*x593))+(((-1.0)*pz*r00*x597))+(((0.2042)*cj0*x596))+(((-0.027)*x602))+(((-1.0)*x589*x622))+(((-1.0)*x589*x629))+x638+(((-0.19131)*cj4))+(((-0.0125)*x649))+(((-0.1808)*x635)));
evalcond[5]=((0.007)+((x589*x633))+(((-0.1808)*x649))+(((-0.027)*x611))+(((-1.0)*px*r00))+(((0.027)*cj0*x596))+(((-1.0)*r01*x630))+(((-1.0)*r02*x622))+(((-5.0e-5)*cj4))+(((-0.0201)*sj4))+(((0.0125)*x635))+(((0.01965)*x608))+(((-0.01965)*x594))+((x621*x633))+(((0.2042)*x602))+(((0.027)*cj1*x589)));
evalcond[6]=((0.0270846561)+((cj1*sj0*x604))+(((0.0393)*px*sj0))+(((-0.0002814)*sj4))+(((-1.0)*x650))+(((-1.0)*x654))+(((-1.0)*x659))+(((-7.0e-7)*cj4))+(((0.4084)*cj0*x617))+(((0.4084)*sj0*x591))+(((-1.0)*py*x612))+x640+x658+(((-1.0)*sj1*x620))+(((-0.0025312)*x649))+(((0.4084)*x619))+(((0.000175)*x635))+((x615*x628)));
evalcond[7]=(((x589*x627))+(((-0.0125)*x598))+((r00*x591))+((x598*x652))+(((-1.0)*x598*x648))+(((0.01965)*x602))+((x596*x601))+(((-1.0)*px*x593*x605))+(((-1.0)*x595*x641))+(((0.2042)*x594))+(((-1.0)*x595*x653))+((x621*x627))+((x602*x618))+(((-0.2042)*x608))+(((-0.0201)*x583*x588))+(((-1.0)*pz*x594*x605))+(((-1.0)*px*r01*x590))+(((-0.1808)*x595))+((x606*x636)));
evalcond[8]=((((0.1808)*x598))+((r00*sj1*x601))+(((-0.0201)*x583*x606))+(((0.027)*x608))+(((-1.0)*x596*x630))+((r01*x615))+((x598*x641))+(((-1.0)*x588*x636))+(((-0.01965)*cj1*x589))+(((-0.0125)*x595))+(((-0.01965)*cj0*x596))+((x598*x653))+((x595*x652))+(((0.01965)*x611))+(((-0.027)*x594))+(((-1.0)*x595*x648))+(((-1.0)*px*x590*x593))+(((-1.0)*pz*x590*x594))+((cj0*r02*x591)));
evalcond[9]=((0.0002814)+((x589*x626))+((sj4*x658))+((x585*x594))+(((-0.00726816)*x649))+(((0.0005025)*x635))+(((0.0010611)*cj1*x589))+(((-1.0)*r02*x599*x618))+(((-1.0)*sj1*x601*x609))+((x591*x614))+(((-1.0)*r02*x591*x628))+((sj4*x640))+(((-0.4084)*x593*x615))+(((0.00802506)*x602))+(((-1.0)*r02*x634))+(((-0.4084)*x594*x619))+(((0.054)*x593*x617))+(((-0.0010611)*x611))+(((-0.0420405175)*x608))+((x585*x608))+(((-1.0)*r00*x618*x625))+(((0.0010611)*cj0*x596))+(((-0.054)*r01*x615))+(((-2.01e-6)*cj4))+((x596*x604))+(((-1.0)*py*x613))+(((0.4084)*x596*x601))+(((0.0689913986)*sj4))+(((-1.0)*px*x623))+((py*x589*x625))+(((0.0420405175)*x594))+((x621*x626))+(((-0.4084)*r01*x617))+(((-1.0)*x594*x650))+(((-1.0)*x608*x650))+(((-1.0)*x608*x654))+((cj0*x602*x607))+((sj1*x594*x620))+((x586*x594))+((px*x593*x599)));
evalcond[10]=((((-0.00802506)*x594))+((x591*x608*x625))+((sj1*x585*x621))+((x603*x621))+(((-1.0)*r01*x607))+(((-1.0)*x602*x659))+(((-1.0)*x602*x650))+(((0.0393)*x594*x619))+((sj1*x587*x589))+(((-1.0)*py*x602*x612))+(((0.00726816)*x595))+(((-0.0110268)*x611))+(((-1.0)*x609*x610))+((x591*x594*x625))+(((-0.00267834)*x642))+(((-0.004500869)*x583*x606))+((x593*x604))+(((0.00802506)*x608))+(((-1.0)*cj2*x657))+(((-0.000175)*cj2))+(((-1.0)*r02*x631))+(((-1.0)*sj2*x644))+((x589*x603))+((x588*x646))+(((0.0005025)*x598))+(((0.0405825175)*x602))+((cj0*px*x599*x611))+(((-1.0)*x591*x623))+(((-1.0)*x606*x637))+((x598*x656))+((x595*x651))+((x595*x655))+(((-1.0)*x598*x643))+(((-1.0)*x586*x589*x590))+(((-0.00476467)*x606))+(((-0.0393)*x596*x601))+(((0.069178946)*x588))+((x613*x617))+(((-1.0)*x585*x589*x590))+(((-1.0)*x587*x590*x621))+((x591*x593*x599))+((px*x596*x599))+(((-1.0)*x589*x620))+((x586*x602))+(((7.0e-7)*x645))+((x592*x621))+(((0.0694869136)*x583*x588))+(((-1.0)*px*x614))+(((-0.0025312)*sj2))+(((-1.0)*x586*x590*x621))+((x589*x592))+((r01*x599*x632))+((px*r02*x628))+(((0.0393)*x593*x615)));
evalcond[11]=((((-1.0)*x585*x589*x605))+(((0.000175)*sj2))+((x589*x631))+(((-1.0)*r01*x591*x599))+(((-1.0)*r01*x604))+((x596*x624*x625))+(((-0.00476467)*x588))+(((-1.0)*x593*x607))+((x589*x616))+((sj1*x601*x623))+(((0.00726816)*x598))+(((-0.0025312)*cj2))+((x616*x621))+(((0.0010611)*x608))+(((-1.0)*x588*x637))+((cj0*x585*x596))+(((-0.0413547625)*cj1*x589))+(((-0.00267834)*x645))+(((-1.0)*r02*x620))+(((-0.0005025)*x595))+(((-0.0010611)*x594))+(((-1.0)*cj2*x644))+(((-0.0413547625)*cj0*x596))+(((-1.0)*x586*x596*x597))+((x595*x643))+(((-0.0393)*x593*x617))+((x598*x655))+((x598*x651))+(((-1.0)*x586*x589*x605))+(((-1.0)*x606*x646))+((x587*x611))+((cj1*x587*x589))+((sj2*x657))+((r02*x592))+((x613*x615))+(((2.0)*py*x594*x615))+(((-1.0)*x587*x596*x597))+((cj0*px*x599*x602))+(((-0.0393)*py*x596))+(((-0.069178946)*x606))+((x585*x611))+(((-0.004500869)*x583*x588))+(((-1.0)*x595*x656))+(((-7.0e-7)*x642))+((x610*x614))+((x593*x599*x632))+(((-1.0)*r00*x599*x617))+(((-0.0694869136)*x583*x606))+(((-1.0)*sj1*x594*x634))+((r02*x591*x612))+(((0.0413547625)*x611))+(((-0.4084)*x638))+(((-1.0)*r02*x586*x590))+(((-1.0)*px*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x660=(cj1*cj2);
IkReal x661=(cj1*sj2);
IkReal x662=(r01*sj0);
IkReal x663=(cj2*sj1);
IkReal x664=(sj1*sj2);
IkReal x665=((1.0)*cj0*r00);
CheckValue<IkReal> x666 = IKatan2WithCheck(IkReal(((((-1.0)*x660*x665))+((r02*x663))+(((-1.0)*r02*x661))+(((-1.0)*x660*x662))+(((-1.0)*x664*x665))+(((-1.0)*x662*x664)))),IkReal((((x662*x663))+((cj0*r00*x663))+(((-1.0)*x661*x665))+((r02*x660))+((r02*x664))+(((-1.0)*x661*x662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x666.valid){
continue;
}
CheckValue<IkReal> x667=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x667.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x666.value)+(((1.5707963267949)*(x667.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x668=IKcos(j3);
IkReal x669=IKsin(j3);
IkReal x670=px*px;
IkReal x671=pz*pz;
IkReal x672=py*py;
IkReal x673=(cj2*cj4);
IkReal x674=(r01*sj0);
IkReal x675=((1.0)*sj1);
IkReal x676=(py*sj1);
IkReal x677=((0.0110268)*cj1);
IkReal x678=(r02*sj0);
IkReal x679=(cj0*r01);
IkReal x680=(sj2*sj4);
IkReal x681=(cj1*r00);
IkReal x682=((1.0)*cj0);
IkReal x683=(cj2*sj4);
IkReal x684=((2.0)*pz);
IkReal x685=((0.19131)*sj2);
IkReal x686=(pz*sj0);
IkReal x687=(cj1*r02);
IkReal x688=((0.0405825175)*sj1);
IkReal x689=((0.054)*py);
IkReal x690=((1.0)*cj1);
IkReal x691=(cj4*sj2);
IkReal x692=((0.4084)*py);
IkReal x693=(r00*sj0);
IkReal x694=((0.054)*r00);
IkReal x695=(cj0*pz);
IkReal x696=(r02*sj1);
IkReal x697=((0.0393)*cj0);
IkReal x698=((0.0393)*r01);
IkReal x699=((0.4084)*r00);
IkReal x700=(cj1*px);
IkReal x701=((0.0110268)*sj1);
IkReal x702=(px*sj1);
IkReal x703=(cj0*py);
IkReal x704=(cj1*pz);
IkReal x705=((0.054)*pz);
IkReal x706=(cj0*r00);
IkReal x707=((1.0)*pz);
IkReal x708=((0.0393)*r00);
IkReal x709=(py*sj0);
IkReal x710=((2.0)*px);
IkReal x711=((0.00802506)*sj1);
IkReal x712=((0.01965)*sj1);
IkReal x713=((0.054)*cj0);
IkReal x714=((0.027)*sj1);
IkReal x715=((1.0)*py);
IkReal x716=((0.4084)*pz);
IkReal x717=(cj1*py);
IkReal x718=((0.2042)*sj1);
IkReal x719=((0.0393)*pz);
IkReal x720=(cj4*x668);
IkReal x721=((0.0201)*x669);
IkReal x722=((0.0044221336)*x669);
IkReal x723=(cj0*px*r02);
IkReal x724=((0.007)*x669);
IkReal x725=((0.069176446)*x668);
IkReal x726=((0.19131)*x668);
IkReal x727=(sj2*x668);
IkReal x728=((2.01e-6)*x668);
IkReal x729=((7.0e-7)*x669);
IkReal x730=(cj2*x668);
IkReal x731=((0.004539131)*x669);
IkReal x732=((1.0)*x669);
IkReal x733=((0.19131)*x669);
IkReal x734=(cj4*x669);
IkReal x735=((1.0)*x672);
IkReal x736=((0.007690662)*x668);
IkReal x737=((5.0e-5)*x668);
IkReal x738=((5.0e-5)*x669);
IkReal x739=((1.0)*x671);
IkReal x740=((2.01e-6)*x669);
IkReal x741=((0.007690662)*x669);
IkReal x742=((0.00267834)*x669);
IkReal x743=((0.00480083)*x669);
IkReal x744=((1.0)*x670);
evalcond[0]=((((-1.0)*x681*x682))+(((-1.0)*x668*x691))+(((-1.0)*x674*x690))+(((-1.0)*x673*x732))+x696);
evalcond[1]=((((-1.0)*x691*x732))+((x668*x673))+(((-1.0)*x674*x675))+(((-1.0)*x687))+(((-1.0)*x675*x706)));
evalcond[2]=((0.027)+(((-0.007)*x668*x691))+(((-1.0)*x690*x709))+(((5.0e-5)*x727))+(((0.1808)*cj2))+(((-1.0)*x673*x724))+(((-1.0)*x682*x700))+((cj2*x726))+((cj2*x738))+((pz*sj1))+(((-0.0125)*sj2))+(((-1.0)*x669*x685)));
evalcond[3]=((0.2042)+(((-1.0)*x691*x724))+((sj2*x738))+(((0.1808)*sj2))+(((-1.0)*pz*x690))+(((0.0125)*cj2))+((cj2*x733))+(((-1.0)*cj0*px*x675))+(((-5.0e-5)*x730))+((x668*x685))+(((-1.0)*x675*x709))+(((0.007)*x668*x673)));
evalcond[4]=(((py*x678))+(((-0.0125)*x734))+(((-1.0)*x706*x714))+(((-0.2042)*x696))+(((-1.0)*x674*x714))+(((-0.027)*x687))+(((-1.0)*x674*x707))+(((-0.1808)*x720))+x723+(((0.2042)*cj1*x674))+(((-1.0)*pz*r00*x682))+(((-0.19131)*cj4))+(((0.2042)*cj0*x681)));
evalcond[5]=((0.007)+(((-1.0)*r02*x707))+(((0.027)*cj1*x674))+(((-1.0)*px*r00))+(((0.0125)*x720))+((x674*x718))+(((0.2042)*x687))+((x706*x718))+(((-0.027)*x696))+(((0.01965)*x693))+(((-5.0e-5)*cj4))+(((-0.0201)*sj4))+(((-0.01965)*x679))+(((0.027)*cj0*x681))+(((-0.1808)*x734))+(((-1.0)*r01*x715)));
evalcond[6]=((0.0270846561)+(((0.4084)*x704))+((x700*x713))+(((0.0393)*px*sj0))+(((-0.0002814)*sj4))+(((0.4084)*sj0*x676))+(((-7.0e-7)*cj4))+(((-0.0025312)*x734))+(((-1.0)*x735))+(((-1.0)*x739))+((cj1*sj0*x689))+(((-1.0)*py*x697))+(((0.000175)*x720))+x725+x743+(((0.4084)*cj0*x702))+(((-1.0)*sj1*x705))+(((-1.0)*x744)));
evalcond[7]=((((-1.0)*x680*x726))+(((-0.1808)*x680))+(((0.2042)*x679))+(((-0.2042)*x693))+((x674*x712))+((r00*x676))+((x706*x712))+((x683*x737))+(((-0.0125)*x683))+((x691*x721))+(((-1.0)*px*r01*x675))+(((-1.0)*pz*x679*x690))+(((-1.0)*px*x678*x690))+(((-1.0)*x683*x733))+((x681*x686))+((x687*x703))+(((-0.0201)*x668*x673))+(((0.01965)*x687))+(((-1.0)*x680*x738)));
evalcond[8]=((((-0.027)*x679))+(((-0.01965)*cj1*x674))+(((-1.0)*x681*x715))+((r01*x700))+(((-1.0)*px*x675*x678))+((x683*x726))+(((0.1808)*x683))+((x683*x738))+((cj0*r02*x676))+(((0.01965)*x696))+(((-0.0125)*x680))+(((-0.01965)*cj0*x681))+(((-1.0)*x673*x721))+(((-0.0201)*x668*x691))+(((-1.0)*pz*x675*x679))+((x680*x737))+((r00*sj1*x686))+(((0.027)*x693))+(((-1.0)*x680*x733)));
evalcond[9]=((0.0002814)+(((0.054)*x678*x702))+(((0.0420405175)*x679))+((sj4*x743))+(((-0.00726816)*x734))+(((-1.0)*r02*x719))+(((-1.0)*x693*x739))+(((-1.0)*x693*x735))+((x671*x679))+(((-1.0)*x679*x735))+((cj0*x687*x692))+(((-1.0)*r02*x684*x703))+((x674*x711))+((x706*x711))+(((-0.0010611)*x696))+((px*x678*x684))+((x670*x679))+((sj1*x679*x705))+(((-0.4084)*r01*x702))+((py*x674*x710))+(((-0.4084)*x678*x700))+(((0.0010611)*cj0*x681))+(((0.4084)*x681*x686))+(((-0.4084)*x679*x704))+(((-1.0)*px*x708))+(((-0.0420405175)*x693))+(((0.0005025)*x720))+(((-2.01e-6)*cj4))+(((-1.0)*r02*x676*x713))+((x681*x689))+(((-1.0)*py*x698))+(((-0.054)*r01*x700))+((x676*x699))+(((-1.0)*r00*x703*x710))+(((0.0689913986)*sj4))+(((0.0010611)*cj1*x674))+((x670*x693))+((sj4*x725))+(((0.00802506)*x687))+(((-1.0)*sj1*x686*x694)));
evalcond[10]=(((sj1*x670*x706))+((x676*x678*x684))+((x683*x741))+(((-1.0)*x687*x735))+((x678*x689))+(((-1.0)*cj2*x742))+(((-1.0)*r02*x716))+(((-1.0)*r01*x692))+((px*x681*x684))+(((-0.00802506)*x679))+(((0.0393)*x678*x700))+(((0.0694869136)*x668*x673))+(((7.0e-7)*x730))+(((-1.0)*x691*x722))+(((0.0405825175)*x687))+(((-1.0)*py*x687*x697))+((r01*x684*x717))+(((0.00726816)*x680))+(((0.069178946)*x673))+(((-0.004500869)*x668*x691))+(((0.0005025)*x683))+(((-0.00267834)*x727))+((x677*x706))+((x674*x677))+(((0.0393)*x679*x704))+(((-0.000175)*cj2))+((x674*x688))+(((-1.0)*x671*x674*x675))+(((-0.0393)*x681*x686))+(((-1.0)*x676*x708))+((x680*x740))+((cj0*px*x684*x696))+((x673*x731))+((x671*x687))+(((-0.00476467)*x691))+(((-1.0)*px*x699))+(((-1.0)*x683*x728))+(((-1.0)*x674*x705))+(((-1.0)*x670*x674*x675))+((px*r02*x713))+((x680*x736))+(((-1.0)*x694*x695))+(((-1.0)*x687*x744))+((x676*x693*x710))+((x698*x702))+(((-1.0)*sj2*x729))+(((0.00802506)*x693))+(((-1.0)*x672*x675*x706))+((x688*x706))+(((-1.0)*x671*x675*x706))+(((-0.0025312)*sj2))+((sj1*x672*x674))+(((-0.0110268)*x696))+((x676*x679*x710)));
evalcond[11]=((((0.000175)*sj2))+((x683*x740))+((r02*x677))+(((-1.0)*x671*x674*x690))+(((-1.0)*r02*x705))+((sj1*x686*x708))+(((-1.0)*x672*x681*x682))+(((-0.0393)*x678*x702))+((x695*x699))+((x701*x706))+(((-1.0)*r00*x684*x702))+(((-1.0)*x671*x681*x682))+(((-0.0025312)*cj2))+(((-0.00267834)*x730))+((x674*x701))+((r02*x676*x697))+(((-1.0)*x691*x731))+((cj0*px*x684*x687))+(((0.0010611)*x693))+(((0.00726816)*x683))+((x674*x716))+(((-0.00476467)*x673))+(((-1.0)*cj2*x729))+((x683*x736))+(((-0.0393)*py*x681))+(((-1.0)*x670*x674*x690))+(((-1.0)*r02*x671*x675))+(((-0.0413547625)*cj0*x681))+(((-1.0)*r01*x676*x684))+((x672*x696))+(((-1.0)*r01*x689))+(((-0.4084)*x723))+(((-0.004500869)*x668*x673))+(((-7.0e-7)*x727))+(((-1.0)*px*x694))+(((-1.0)*x673*x722))+((x680*x728))+((x681*x709*x710))+(((-1.0)*x680*x741))+(((-0.0005025)*x680))+(((-0.0010611)*x679))+((x698*x700))+(((-0.0413547625)*cj1*x674))+((sj2*x742))+(((-0.069178946)*x691))+((cj1*x672*x674))+(((2.0)*py*x679*x700))+((x670*x696))+((x678*x684*x717))+(((-1.0)*x678*x692))+(((0.0413547625)*x696))+(((-1.0)*sj1*x679*x719))+(((-0.0694869136)*x668*x691))+((cj0*x670*x681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "f8f484662822f53b8b3077a3db906210"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
