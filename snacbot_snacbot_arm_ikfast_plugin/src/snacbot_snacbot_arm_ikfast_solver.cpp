/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-04-14 18:15:21.035290
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.19131)*x0);
x11=((1.0)*x2);
x12=((0.0125)*x7);
x13=((1.0)*x5);
x14=((5.0e-5)*x0);
x15=((0.1808)*x7);
x16=((5.0e-5)*x7);
x17=((1.0)*x6);
x18=((5.0e-5)*x1);
x19=((1.0)*x0);
x20=((0.19131)*x7);
x21=((0.027)*x3);
x22=(x3*x4);
x23=(x1*x3);
x24=(x0*x2);
x25=(x2*x4);
x26=(x1*x2);
eetrans[0]=(((x5*((((x14*x23))+((x14*x25))))))+(((-0.00045)*x7))+((x6*((((x10*x23))+((x10*x25))))))+((x0*x21))+(((0.0125)*x1*x24))+(((0.1808)*x0*x23))+(((0.2042)*x24))+((x6*((((x14*x22))+(((-1.0)*x14*x26))))))+(((-0.0125)*x0*x22))+(((0.1808)*x24*x4))+((x5*(((((-1.0)*x10*x22))+((x10*x26)))))));
IkReal x27=((1.0)*x22);
eetrans[1]=(((x21*x7))+((x5*((((x16*x25))+((x16*x23))))))+((x5*(((((-1.0)*x20*x27))+((x20*x26))))))+(((0.00045)*x0))+((x6*(((((-1.0)*x16*x26))+((x16*x22))))))+((x6*((((x20*x23))+((x20*x25))))))+((x12*x26))+((x15*x25))+((x15*x23))+(((0.2042)*x2*x7))+(((-1.0)*x12*x27)));
IkReal x28=((1.0)*x18);
eetrans[2]=((0.1455)+(((-0.027)*x2))+(((0.1808)*x22))+((x5*(((((-1.0)*x2*x28))+(((5.0e-5)*x22))))))+(((0.0125)*x25))+(((0.0125)*x23))+((x6*(((((0.19131)*x22))+(((-0.19131)*x26))))))+((x6*(((((-5.0e-5)*x25))+(((-1.0)*x28*x3))))))+(((-0.1808)*x26))+((x5*(((((0.19131)*x25))+(((0.19131)*x23))))))+(((0.2042)*x3)));
eerot[0]=(((x7*x9))+(((-1.0)*x8*((((x17*(((((-1.0)*x0*x1*x11))+((x19*x22))))))+((x13*((((x0*x23))+((x24*x4)))))))))));
IkReal x29=((1.0)*x7);
eerot[1]=((((-1.0)*x19*x9))+(((-1.0)*x8*((((x13*((((x23*x7))+((x25*x7))))))+((x17*((((x22*x29))+(((-1.0)*x1*x11*x29)))))))))));
IkReal x30=((1.0)*x11);
eerot[2]=((-1.0)*x8*((((x13*(((((-1.0)*x1*x30))+x22))))+((x17*(((((-1.0)*x30*x4))+(((-1.0)*x23)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.1455)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((IKabs(px))+(IKabs(py)));
j0eval[1]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x33 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x33.valid){
continue;
}
IkReal x31=((1.0)*(x33.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x34=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x34.valid){
continue;
}
if( (((0.00045)*(x34.value))) < -1-IKFAST_SINCOS_THRESH || (((0.00045)*(x34.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x32=IKasin(((0.00045)*(x34.value)));
j0array[0]=((((-1.0)*x31))+x32);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x32))+(((-1.0)*x31)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x35=px*px;
IkReal x36=py*py;
IkReal x37=pz*pz;
IkReal x38=((0.0116998816944938)*r02);
IkReal x39=((0.0349789883723082)*r02);
IkReal x40=((0.0544671428018235)*r02);
IkReal x41=((0.0103576434828033)*r02);
IkReal x42=(cj0*r00);
IkReal x43=(py*sj0);
IkReal x44=((0.383494507999895)*r02);
IkReal x45=(r00*sj0);
IkReal x46=(r01*sj0);
IkReal x47=((0.433305492000105)*pz);
IkReal x48=((1.0)*r02);
IkReal x49=((2.0)*pz);
IkReal x50=(px*r00);
IkReal x51=((0.0009)*cj0);
IkReal x52=(pz*r01);
IkReal x53=(py*r01);
IkReal x54=((0.307606509197637)*pz);
IkReal x55=((0.415606509197637)*pz);
IkReal x56=(pz*r02);
IkReal x57=(py*r02);
IkReal x58=((0.0009)*px);
IkReal x59=((4.0)*pz);
IkReal x60=((0.383494507999895)*pz);
IkReal x61=(cj0*r01);
IkReal x62=(cj0*px);
IkReal x63=(r02*sj0);
IkReal x64=((0.0018)*px);
IkReal x65=(py*r00);
IkReal x66=((0.0018)*cj0);
IkReal x67=(r01*x58);
IkReal x68=((2.42970708610632e-5)*x61);
IkReal x69=((0.0423000916276918)*x42);
IkReal x70=((0.0423000916276918)*x46);
IkReal x71=((0.0539934908023626)*x56);
IkReal x72=((2.42970708610632e-5)*x45);
IkReal x73=((0.0539934908023626)*x53);
IkReal x74=((0.0539934908023626)*x50);
IkReal x75=((0.0009)*x65);
IkReal x76=((0.000183822528599953)*x61);
IkReal x77=((0.408494507999895)*x56);
IkReal x78=((0.000183822528599953)*x45);
IkReal x79=((0.408494507999895)*x50);
IkReal x80=((0.0848674383055062)*x46);
IkReal x81=((0.0848674383055062)*x42);
IkReal x82=((0.408494507999895)*x53);
IkReal x83=(r02*x37);
IkReal x84=((0.0018)*x65);
IkReal x85=(r01*x64);
IkReal x86=((0.0628177634828033)*x46);
IkReal x87=((0.000183737471400047)*x61);
IkReal x88=(r02*x36);
IkReal x89=(r02*x35);
IkReal x90=((0.0628177634828033)*x42);
IkReal x91=((0.408305492000105)*x50);
IkReal x92=((0.408305492000105)*x56);
IkReal x93=((0.408305492000105)*x53);
IkReal x94=((0.000183737471400047)*x45);
IkReal x95=((2.43029291389368e-5)*x45);
IkReal x96=((0.0540065091976374)*x50);
IkReal x97=((0.0540065091976374)*x56);
IkReal x98=((0.0540065091976374)*x53);
IkReal x99=((0.0321283371981765)*x42);
IkReal x100=((2.43029291389368e-5)*x61);
IkReal x101=((0.0321283371981765)*x46);
IkReal x102=((1.0)*x36);
IkReal x103=(r02*x62);
IkReal x104=((2.0)*x35);
IkReal x105=((2.0)*x36);
IkReal x106=((1.0)*x35);
IkReal x107=((1.0)*x37);
IkReal x108=((2.0)*x37);
IkReal x109=(x42*x47);
IkReal x110=(x46*x47);
IkReal x111=((0.433305492000105)*r02*x43);
IkReal x112=((0.433305492000105)*x103);
IkReal x113=(x51*x52);
IkReal x114=(x58*x63);
IkReal x115=((0.415606509197637)*r02*x43);
IkReal x116=((0.415606509197637)*x103);
IkReal x117=(x51*x57);
IkReal x118=(x42*x55);
IkReal x119=(x49*x50);
IkReal x120=(x46*x55);
IkReal x121=((0.0009)*pz*x45);
IkReal x122=(x49*x53);
IkReal x123=(x36*x48);
IkReal x124=(x35*x48);
IkReal x125=(x46*x54);
IkReal x126=(x42*x54);
IkReal x127=((0.307606509197637)*r02*x43);
IkReal x128=((0.307606509197637)*x103);
IkReal x129=(x37*x48);
IkReal x130=(x37*x46);
IkReal x131=(x35*x46);
IkReal x132=(x36*x42);
IkReal x133=(x37*x42);
IkReal x134=(x52*x66);
IkReal x135=((2.0)*x88);
IkReal x136=((2.0)*x89);
IkReal x137=(x63*x64);
IkReal x138=(x35*x42);
IkReal x139=(x43*x44);
IkReal x140=(x44*x62);
IkReal x141=(x36*x46);
IkReal x142=(x42*x60);
IkReal x143=(x46*x60);
IkReal x144=(r02*x43*x49);
IkReal x145=((2.0)*x43*x50);
IkReal x146=((2.0)*x53*x62);
IkReal x147=(x103*x49);
IkReal x148=((4.0)*x43*x50);
IkReal x149=((4.0)*x53*x62);
IkReal x150=((4.0)*x56*x62);
IkReal x151=(x105*x46);
IkReal x152=(x104*x42);
IkReal x153=((4.0)*x43*x56);
IkReal x154=(x108*x46);
IkReal x155=(x104*x46);
IkReal x156=(x105*x42);
IkReal x157=(x108*x42);
IkReal x158=(x106*x42);
IkReal x159=(x102*x46);
IkReal x160=(x106*x46);
IkReal x161=(x107*x42);
IkReal x162=(x102*x42);
IkReal x163=(x107*x46);
IkReal x164=(x88+x89);
IkReal x165=(x124+x123);
IkReal x166=(x141+x138);
IkReal x167=(x113+x114);
IkReal x168=(x70+x67+x69);
IkReal x169=(x101+x67+x99);
IkReal x170=(x159+x158);
IkReal x171=(x110+x109+x68);
IkReal x172=(x126+x125+x87);
IkReal x173=(x142+x143+x100);
IkReal x174=(x116+x115+x76);
IkReal x175=(x167+x86+x90);
IkReal x176=(x131+x130+x133+x132);
IkReal x177=(x135+x134+x137+x136);
IkReal x178=(x122+x121+x117+x119+x40);
IkReal x179=((((4.0)*py*x52))+((x50*x59))+((x57*x66))+(((2.0)*x83))+(((0.0018)*pz*x45)));
IkReal x180=(x127+x128+x91+x93+x92+x94);
IkReal x181=(x162+x163+x160+x161);
IkReal x182=(x112+x111+x74+x73+x72+x71);
IkReal x183=(x140+x139+x98+x95+x97+x96);
IkReal x184=(x120+x118+x77+x79+x78+x82);
IkReal x185=(x157+x156+x155+x154+x85);
IkReal x186=(x122+x121+x117+x119+x39+x80+x81);
IkReal x187=(x144+x145+x146+x147+x75+x38);
IkReal x188=(x144+x145+x146+x147+x75+x41);
IkReal x189=(x153+x152+x151+x150+x148+x149+x84);
IkReal x190=((((-1.0)*x179))+x177+(((0.0233997633889877)*x42))+(((0.0233997633889877)*x46))+(((0.0846001832553837)*r02)));
IkReal x191=((((-0.0207152869656065)*x46))+(((-0.0207152869656065)*x42))+(((-0.0642566743963529)*r02))+(((-1.0)*x177))+x179);
IkReal x192=((((-1.0)*x185))+x189+(((-0.169734876611012)*r02))+(((0.0699579767446163)*x42))+(((0.0699579767446163)*x46)));
IkReal x193=((((0.108934285603647)*x42))+(((0.108934285603647)*x46))+(((-1.0)*x185))+(((0.125635526965607)*r02))+x189);
IkReal x194=((((-1.0)*x186))+(((-1.0)*x184))+(((-1.0)*x129))+x174+x167+x164);
IkReal x195=((((-1.0)*x178))+(((-1.0)*x180))+(((-1.0)*x129))+x172+x175+x164);
IkReal x196=((((-1.0)*x165))+(((-1.0)*x167))+(((-1.0)*x184))+x174+x186+x83);
IkReal x197=((((-1.0)*x165))+(((-1.0)*x175))+(((-1.0)*x180))+x178+x172+x83);
IkReal x198=((((-1.0)*x170))+(((-1.0)*x187))+(((-1.0)*x182))+x171+x176+x168);
IkReal x199=((((-1.0)*x170))+(((-1.0)*x173))+(((-1.0)*x188))+x176+x169+x183);
IkReal x200=((((-1.0)*x168))+(((-1.0)*x182))+(((-1.0)*x181))+x171+x166+x187);
IkReal x201=((((-1.0)*x169))+(((-1.0)*x173))+(((-1.0)*x181))+x166+x183+x188);
IkReal gconst0=x200;
IkReal gconst1=x190;
IkReal gconst2=x198;
IkReal gconst3=x196;
IkReal gconst4=x192;
IkReal gconst5=x194;
IkReal gconst6=x200;
IkReal gconst7=x190;
IkReal gconst8=x198;
IkReal gconst9=x196;
IkReal gconst10=x192;
IkReal gconst11=x194;
IkReal gconst12=x197;
IkReal gconst13=x193;
IkReal gconst14=x195;
IkReal gconst15=x199;
IkReal gconst16=x191;
IkReal gconst17=x201;
IkReal gconst18=x197;
IkReal gconst19=x193;
IkReal gconst20=x195;
IkReal gconst21=x199;
IkReal gconst22=x191;
IkReal gconst23=x201;
IkReal x202=((1.0)*gconst21);
IkReal x203=(gconst14*gconst20);
IkReal x204=(gconst13*gconst17);
IkReal x205=(gconst14*gconst4);
IkReal x206=(gconst18*gconst22);
IkReal x207=(gconst20*gconst21);
IkReal x208=(gconst0*gconst17);
IkReal x209=(gconst12*gconst5);
IkReal x210=(gconst21*gconst8);
IkReal x211=((1.0)*gconst9);
IkReal x212=(gconst15*gconst2);
IkReal x213=(gconst16*gconst2);
IkReal x214=(gconst10*gconst18);
IkReal x215=(gconst1*gconst17);
IkReal x216=(gconst2*gconst3);
IkReal x217=(gconst2*gconst4);
IkReal x218=(gconst19*gconst21);
IkReal x219=(gconst19*gconst5);
IkReal x220=(gconst11*gconst6);
IkReal x221=(gconst12*gconst17);
IkReal x222=(gconst8*gconst9);
IkReal x223=(gconst7*gconst9);
IkReal x224=(gconst14*gconst3);
IkReal x225=(gconst14*gconst15);
IkReal x226=(gconst23*gconst6);
IkReal x227=(gconst14*gconst16);
IkReal x228=(gconst10*gconst6);
IkReal x229=(gconst1*gconst5);
IkReal x230=(gconst18*gconst23);
IkReal x231=(gconst20*gconst9);
IkReal x232=(gconst13*gconst5);
IkReal x233=(gconst11*gconst18);
IkReal x234=(gconst21*gconst7);
IkReal x235=(gconst19*gconst9);
IkReal x236=(gconst0*gconst5);
IkReal x237=(gconst22*gconst6);
IkReal x238=((1.0)*x237);
IkReal x239=(gconst2*x235);
IkReal x240=(gconst7*x215);
IkReal x241=((1.0)*x236);
IkReal x242=(gconst23*x241);
op[0]=((((-1.0)*x221*x230))+((x207*x221))+(((-1.0)*x206*x227))+(((-1.0)*gconst15*x202*x203))+((x204*x206))+((x225*x230))+((x218*x227))+(((-1.0)*gconst19*x202*x204)));
op[1]=(((x210*x221))+(((-1.0)*x221*x233))+((x204*x214))+(((-1.0)*gconst13*x202*x219))+((x225*x226))+(((-1.0)*gconst15*x203*x211))+(((-1.0)*x227*x238))+((x213*x218))+((x206*x215))+(((-1.0)*x208*x230))+(((-1.0)*x205*x206))+(((-1.0)*gconst19*x204*x211))+((x205*x218))+(((-1.0)*x209*x230))+(((-1.0)*gconst8*x202*x225))+((x204*x237))+(((-1.0)*x206*x213))+((x225*x233))+((x227*x235))+((x227*x234))+((x224*x230))+((x221*x231))+(((-1.0)*gconst3*x202*x203))+(((-1.0)*gconst7*x202*x204))+(((-1.0)*gconst20*x202*x212))+(((-1.0)*x221*x226))+((x212*x230))+((x207*x209))+((x207*x208))+(((-1.0)*gconst19*x202*x215))+(((-1.0)*x214*x227))+((x206*x232)));
op[2]=((((-1.0)*x220*x221))+((x224*x226))+(((-1.0)*gconst7*x204*x211))+(((-1.0)*x213*x238))+((x205*x235))+((x205*x234))+(((-1.0)*gconst1*x202*x219))+(((-1.0)*x202*x240))+(((-1.0)*gconst8*x202*x212))+((x206*x229))+((x214*x215))+(((-1.0)*x213*x214))+(((-1.0)*x208*x226))+(((-1.0)*gconst20*x211*x212))+((x232*x237))+(((-1.0)*x208*x233))+((x208*x210))+(((-1.0)*x230*x241))+(((-1.0)*gconst3*x203*x211))+((x223*x227))+((x209*x210))+((x204*x228))+(((-1.0)*x209*x233))+((x220*x225))+(((-1.0)*gconst8*x202*x224))+(((-1.0)*gconst8*x211*x225))+(((-1.0)*x206*x217))+((x213*x234))+((x213*x235))+(((-1.0)*x205*x238))+((x214*x232))+((x224*x233))+(((-1.0)*x205*x214))+((x221*x222))+(((-1.0)*x227*x228))+((x215*x237))+((x209*x231))+(((-1.0)*gconst13*x211*x219))+(((-1.0)*gconst20*x202*x216))+((x216*x230))+((x217*x218))+(((-1.0)*gconst19*x211*x215))+((x208*x231))+(((-1.0)*gconst7*x202*x232))+((x207*x236))+(((-1.0)*x209*x226))+((x212*x233))+((x212*x226)));
op[3]=((((-1.0)*x213*x228))+(((-1.0)*gconst7*x202*x229))+((x205*x223))+(((-1.0)*x205*x228))+(((-1.0)*gconst8*x202*x216))+((x229*x237))+((x216*x226))+(((-1.0)*x208*x220))+(((-1.0)*x226*x241))+(((-1.0)*gconst20*x211*x216))+((x215*x228))+((x228*x232))+((x208*x222))+((x209*x222))+((x217*x235))+((x217*x234))+((x214*x229))+((x213*x223))+(((-1.0)*gconst8*x211*x212))+(((-1.0)*x214*x217))+(((-1.0)*gconst1*x211*x219))+(((-1.0)*x233*x241))+((x220*x224))+(((-1.0)*gconst8*x211*x224))+(((-1.0)*x217*x238))+(((-1.0)*x211*x240))+((x216*x233))+((x231*x236))+(((-1.0)*x209*x220))+((x210*x236))+(((-1.0)*gconst7*x211*x232))+((x212*x220)));
op[4]=(((x216*x220))+((x228*x229))+(((-1.0)*x220*x241))+(((-1.0)*gconst8*x211*x216))+((x222*x236))+((x217*x223))+(((-1.0)*x217*x228))+(((-1.0)*gconst7*x211*x229)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x243=cj2*cj2;
IkReal x244=sj2*sj2;
IkReal x245=cj2*cj2*cj2;
IkReal x246=sj2*sj2*sj2;
IkReal x247=(cj0*r00);
IkReal x248=(r01*sj0);
IkReal x249=(py*sj0);
IkReal x250=((3.06096)*pz);
IkReal x251=((1.53048)*pz);
IkReal x252=((0.1463980744)*r02);
IkReal x253=(cj0*px);
IkReal x254=((0.0002)*pz);
IkReal x255=(cj4*x244);
IkReal x256=((0.2927961488)*x243);
IkReal x257=(cj4*x243);
IkReal x258=((0.2927961488)*x244);
IkReal x259=(cj4*x245);
IkReal x260=(cj4*x246);
IkReal x261=((0.0008)*x253);
IkReal x262=((0.5855922976)*x243);
IkReal x263=((0.5855922976)*x244);
IkReal x264=(x243*x252);
IkReal x265=(x244*x252);
IkReal x266=((0.06186192)*x255);
IkReal x267=((0.06186192)*x257);
IkReal x268=((0.415058676)*x259);
IkReal x269=((0.02880498)*x260);
IkReal x270=((0.138352892)*x259);
IkReal x271=((0.02062064)*x257);
IkReal x272=((0.02062064)*x255);
IkReal x273=((0.00960166)*x260);
IkReal x274=(x254*x257);
IkReal x275=(x254*x255);
IkReal x276=((0.415058676)*cj2*x255);
IkReal x277=((0.02880498)*sj2*x257);
IkReal x278=((0.138352892)*cj2*x255);
IkReal x279=((0.00960166)*sj2*x257);
IkReal x280=((0.76524)*x249*x257);
IkReal x281=((0.76524)*x253*x255);
IkReal x282=((0.76524)*x249*x255);
IkReal x283=((0.76524)*x253*x257);
IkReal x284=(x273+x279);
IkReal x285=(x269+x277);
IkReal x286=(x272+x270+x271+x278);
IkReal x287=(x267+x266+x268+x276);
IkReal x288=(x265+x264+x274+x275);
IkReal x289=(x283+x282+x281+x280);
IkReal x290=((((0.0004)*x253*x257))+(((0.0004)*x253*x255))+((x248*x256))+((x248*x258))+((x251*x255))+((x251*x257))+(((0.0004)*x249*x255))+(((0.0004)*x249*x257))+((x247*x258))+((x247*x256)));
op[0]=(x289+x286+(((-1.0)*x284))+(((-1.0)*x288)));
op[1]=x290;
op[2]=(x289+x287+(((-1.0)*x285))+(((-1.0)*x288)));
op[3]=((((0.0008)*x249*x255))+(((0.0008)*x249*x257))+((x248*x262))+((x248*x263))+((x250*x255))+((x250*x257))+((x255*x261))+((x257*x261))+((x247*x263))+((x247*x262)));
op[4]=(x288+x287+(((-1.0)*x285))+(((-1.0)*x289)));
op[5]=x290;
op[6]=(x288+x286+(((-1.0)*x284))+(((-1.0)*x289)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((0.0002)*cj0*cj4*px*(sj2*sj2)))+(((0.76524)*cj4*pz*(cj2*cj2)))+(((0.0002)*cj4*py*sj0*(cj2*cj2)))+(((0.1463980744)*r01*sj0*(sj2*sj2)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-0.1463980744)*cj0*r00*(sj2*sj2)))+(((-0.76524)*cj4*pz*(sj2*sj2)))+(((-0.76524)*cj4*pz*(cj2*cj2)))+(((-0.0002)*cj0*cj4*px*(sj2*sj2)))+(((-0.1463980744)*cj0*r00*(cj2*cj2)))+(((-0.1463980744)*r01*sj0*(cj2*cj2)))+(((-0.00960166)*cj2*cj4*(sj2*sj2)))+(((-0.138352892)*cj4*sj2*(cj2*cj2)))+(((-0.156267408)*cj4*(cj2*cj2)))+(((-0.156267408)*cj4*(sj2*sj2)))+(((-0.138352892)*cj4*(sj2*sj2*sj2)))+(((-0.0002)*cj4*py*sj0*(sj2*sj2)))+(((-0.0002)*cj0*cj4*px*(cj2*cj2)))+(((-0.00960166)*cj4*(cj2*cj2*cj2)))+(((-0.0002)*cj4*py*sj0*(cj2*cj2)))+(((-0.1463980744)*r01*sj0*(sj2*sj2)))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-0.0004)*cj4*pz*(sj2*sj2)))+(((1.53048)*cj0*cj4*px*(cj2*cj2)))+(((1.53048)*cj4*py*sj0*(sj2*sj2)))+(((-0.2927961488)*r02*(sj2*sj2)))+(((-0.2927961488)*r02*(cj2*cj2)))+(((-0.0004)*cj4*pz*(cj2*cj2)))+(((1.53048)*cj4*py*sj0*(cj2*cj2)))+(((1.53048)*cj0*cj4*px*(sj2*sj2)))))))+(((0.1463980744)*cj0*r00*(cj2*cj2)))+((htj1*(((((-0.0004)*cj4*pz*(sj2*sj2)))+(((1.53048)*cj0*cj4*px*(cj2*cj2)))+(((1.53048)*cj4*py*sj0*(sj2*sj2)))+(((-0.2927961488)*r02*(sj2*sj2)))+(((-0.2927961488)*r02*(cj2*cj2)))+(((-0.0004)*cj4*pz*(cj2*cj2)))+(((1.53048)*cj4*py*sj0*(cj2*cj2)))+(((1.53048)*cj0*cj4*px*(sj2*sj2)))))))+(((0.0002)*cj4*py*sj0*(sj2*sj2)))+(((-0.00960166)*cj2*cj4*(sj2*sj2)))+(((0.1463980744)*cj0*r00*(sj2*sj2)))+(((-0.138352892)*cj4*sj2*(cj2*cj2)))+(((-0.156267408)*cj4*(cj2*cj2)))+(((0.0002)*cj0*cj4*px*(cj2*cj2)))+(((-0.156267408)*cj4*(sj2*sj2)))+(((-0.138352892)*cj4*(sj2*sj2*sj2)))+(((htj1*htj1*htj1)*(((((3.06096)*cj4*py*sj0*(sj2*sj2)))+(((3.06096)*cj0*cj4*px*(sj2*sj2)))+(((3.06096)*cj0*cj4*px*(cj2*cj2)))+(((-0.5855922976)*r02*(sj2*sj2)))+(((-0.0008)*cj4*pz*(sj2*sj2)))+(((3.06096)*cj4*py*sj0*(cj2*cj2)))+(((-0.0008)*cj4*pz*(cj2*cj2)))+(((-0.5855922976)*r02*(cj2*cj2)))))))+(((0.76524)*cj4*pz*(sj2*sj2)))+(((0.1463980744)*r01*sj0*(cj2*cj2)))+(((-0.00960166)*cj4*(cj2*cj2*cj2)))+(((htj1*htj1*htj1*htj1)*(((((-0.1463980744)*cj0*r00*(sj2*sj2)))+(((-0.76524)*cj4*pz*(sj2*sj2)))+(((-0.76524)*cj4*pz*(cj2*cj2)))+(((-0.02880498)*cj4*(cj2*cj2*cj2)))+(((-0.0002)*cj0*cj4*px*(sj2*sj2)))+(((-0.1463980744)*cj0*r00*(cj2*cj2)))+(((-0.02880498)*cj2*cj4*(sj2*sj2)))+(((-0.1463980744)*r01*sj0*(cj2*cj2)))+(((-0.415058676)*cj4*(sj2*sj2*sj2)))+(((-0.468802224)*cj4*(sj2*sj2)))+(((-0.0002)*cj4*py*sj0*(sj2*sj2)))+(((-0.468802224)*cj4*(cj2*cj2)))+(((-0.415058676)*cj4*sj2*(cj2*cj2)))+(((-0.0002)*cj0*cj4*px*(cj2*cj2)))+(((-0.0002)*cj4*py*sj0*(cj2*cj2)))+(((-0.1463980744)*r01*sj0*(sj2*sj2)))))))+(((htj1*htj1)*(((((0.0002)*cj0*cj4*px*(sj2*sj2)))+(((0.76524)*cj4*pz*(cj2*cj2)))+(((0.0002)*cj4*py*sj0*(cj2*cj2)))+(((0.1463980744)*r01*sj0*(sj2*sj2)))+(((-0.02880498)*cj4*(cj2*cj2*cj2)))+(((-0.02880498)*cj2*cj4*(sj2*sj2)))+(((-0.415058676)*cj4*(sj2*sj2*sj2)))+(((0.1463980744)*cj0*r00*(cj2*cj2)))+(((0.0002)*cj4*py*sj0*(sj2*sj2)))+(((0.1463980744)*cj0*r00*(sj2*sj2)))+(((-0.468802224)*cj4*(sj2*sj2)))+(((0.0002)*cj0*cj4*px*(cj2*cj2)))+(((0.76524)*cj4*pz*(sj2*sj2)))+(((-0.468802224)*cj4*(cj2*cj2)))+(((-0.415058676)*cj4*sj2*(cj2*cj2)))+(((0.1463980744)*r01*sj0*(cj2*cj2))))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x291=((5.2271179326386)*sj1);
IkReal x292=(pz*sj2);
IkReal x293=(cj0*px);
IkReal x294=((5.2271179326386)*cj1);
IkReal x295=(cj2*pz);
IkReal x296=((0.00136613818740228)*sj1);
IkReal x297=((0.00136613818740228)*cj1);
IkReal x298=(py*sj0*sj2);
IkReal x299=(cj2*py*sj0);
if( IKabs(((-0.0655859719422648)+((x291*x299))+((x291*x292))+(((-1.06741436757586)*cj2))+((sj2*x293*x296))+((x297*x299))+((cj2*x293*x297))+(((0.140853218763375)*sj2))+(((-1.0)*x295*x296))+((x296*x298))+((cj2*x291*x293))+((x294*x295))+((x292*x297))+(((-1.0)*x294*x298))+(((-1.0)*sj2*x293*x294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.945045845493716)+((x291*x298))+(((-1.0)*x291*x295))+((sj2*x293*x297))+(((-1.0)*x296*x299))+(((-0.140853218763375)*cj2))+(((-1.06741436757586)*sj2))+(((-1.0)*cj2*x293*x296))+((x297*x298))+((cj2*x293*x294))+((sj2*x291*x293))+(((-1.0)*x295*x297))+((x294*x299))+((x292*x294))+(((-1.0)*x292*x296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0655859719422648)+((x291*x299))+((x291*x292))+(((-1.06741436757586)*cj2))+((sj2*x293*x296))+((x297*x299))+((cj2*x293*x297))+(((0.140853218763375)*sj2))+(((-1.0)*x295*x296))+((x296*x298))+((cj2*x291*x293))+((x294*x295))+((x292*x297))+(((-1.0)*x294*x298))+(((-1.0)*sj2*x293*x294))))+IKsqr(((-0.945045845493716)+((x291*x298))+(((-1.0)*x291*x295))+((sj2*x293*x297))+(((-1.0)*x296*x299))+(((-0.140853218763375)*cj2))+(((-1.06741436757586)*sj2))+(((-1.0)*cj2*x293*x296))+((x297*x298))+((cj2*x293*x294))+((sj2*x291*x293))+(((-1.0)*x295*x297))+((x294*x299))+((x292*x294))+(((-1.0)*x292*x296))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.0655859719422648)+((x291*x299))+((x291*x292))+(((-1.06741436757586)*cj2))+((sj2*x293*x296))+((x297*x299))+((cj2*x293*x297))+(((0.140853218763375)*sj2))+(((-1.0)*x295*x296))+((x296*x298))+((cj2*x291*x293))+((x294*x295))+((x292*x297))+(((-1.0)*x294*x298))+(((-1.0)*sj2*x293*x294))), ((-0.945045845493716)+((x291*x298))+(((-1.0)*x291*x295))+((sj2*x293*x297))+(((-1.0)*x296*x299))+(((-0.140853218763375)*cj2))+(((-1.06741436757586)*sj2))+(((-1.0)*cj2*x293*x296))+((x297*x298))+((cj2*x293*x294))+((sj2*x291*x293))+(((-1.0)*x295*x297))+((x294*x299))+((x292*x294))+(((-1.0)*x292*x296))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x300=IKcos(j3);
IkReal x301=IKsin(j3);
IkReal x302=((0.1808)*sj2);
IkReal x303=((0.0125)*cj2);
IkReal x304=((0.1808)*cj2);
IkReal x305=((0.0125)*sj2);
IkReal x306=px*px;
IkReal x307=pz*pz;
IkReal x308=py*py;
IkReal x309=(r00*sj1);
IkReal x310=((1.0)*cj1);
IkReal x311=(cj0*r01);
IkReal x312=(pz*sj0);
IkReal x313=(r01*sj1);
IkReal x314=((2.0)*py);
IkReal x315=((0.19131)*sj2);
IkReal x316=(px*r02);
IkReal x317=((1.0)*sj0);
IkReal x318=((0.4084)*cj0);
IkReal x319=(cj1*r00);
IkReal x320=(cj1*r02);
IkReal x321=(cj1*sj0);
IkReal x322=((0.054)*pz);
IkReal x323=(r02*sj1);
IkReal x324=(r00*sj0);
IkReal x325=(cj0*r00);
IkReal x326=((0.0393)*py);
IkReal x327=((0.4084)*py);
IkReal x328=((0.19131)*cj2);
IkReal x329=(px*sj1);
IkReal x330=(cj0*py);
IkReal x331=(r02*sj0);
IkReal x332=((0.0393)*px);
IkReal x333=(cj1*r01);
IkReal x334=(cj1*pz);
IkReal x335=((0.0110268)*cj0);
IkReal x336=((0.4084)*px);
IkReal x337=(pz*sj1);
IkReal x338=((2.0)*cj0);
IkReal x339=(px*sj0);
IkReal x340=((0.01965)*cj0);
IkReal x341=((0.054)*cj0);
IkReal x342=((0.054)*py);
IkReal x343=(sj0*sj1);
IkReal x344=((1.0)*cj0);
IkReal x345=(cj1*px);
IkReal x346=(pz*r02);
IkReal x347=((0.054)*px);
IkReal x348=((0.069176446)*x300);
IkReal x349=((0.00480083)*x301);
IkReal x350=(r01*x307);
IkReal x351=(r00*x308);
IkReal x352=(cj2*x301);
IkReal x353=((1.0)*x308);
IkReal x354=((1.0)*x307);
IkReal x355=(sj2*x301);
IkReal x356=((2.01e-6)*x300);
IkReal x357=(sj2*x300);
IkReal x358=(cj0*x306);
IkReal x359=(cj2*x300);
IkReal x360=((2.0)*px*pz);
IkReal x361=((5.0e-5)*x359);
IkReal x362=(x300*x315);
IkReal x363=(x301*x328);
IkReal x364=((5.0e-5)*x355);
IkReal x365=((5.0e-5)*x352);
IkReal x366=((5.0e-5)*x357);
IkReal x367=(x300*x328);
IkReal x368=(x301*x315);
IkReal x369=(x305+x368);
IkReal x370=(x348+x349);
IkReal x371=(x304+x365+x366+x367);
IkReal x372=(x302+x303+x362+x363+x364);
evalcond[0]=((0.027)+(((-1.0)*x369))+x337+x371+(((-1.0)*py*sj0*x310))+(((-1.0)*cj0*px*x310)));
evalcond[1]=((0.2042)+(((-1.0)*x361))+x372+(((-1.0)*py*sj1*x317))+(((-1.0)*pz*x310))+(((-1.0)*x329*x344)));
evalcond[2]=((0.0270356561)+((x318*x329))+((x327*x343))+(((-1.0)*sj1*x322))+(((-1.0)*x354))+(((-1.0)*x353))+(((-1.0)*x306))+x370+(((0.4084)*x334))+((x341*x345))+(((-1.0)*cj0*x326))+((x321*x342))+((sj0*x332)));
evalcond[3]=((((-1.0)*pz*x310*x311))+((x312*x319))+(((-1.0)*x372))+(((-1.0)*px*x313))+(((0.01965)*x320))+(((0.01965)*sj0*x313))+x361+(((-1.0)*sj0*x310*x316))+((x320*x330))+((x309*x340))+(((0.2042)*x311))+(((-0.2042)*x324))+((py*x309)));
evalcond[4]=((((-1.0)*sj1*x316*x317))+((px*x333))+(((-1.0)*x369))+(((-0.01965)*r01*x321))+(((-1.0)*py*r00*x310))+(((0.027)*x324))+(((0.01965)*x323))+x371+((x309*x312))+(((-0.027)*x311))+(((-1.0)*x319*x340))+((x323*x330))+(((-1.0)*x311*x337)));
evalcond[5]=((0.0690403986)+(((0.00802506)*cj0*x309))+(((-1.0)*x313*x336))+(((-0.0010611)*x323))+(((-0.054)*x309*x312))+(((-0.0393)*x346))+(((-0.4084)*x311*x334))+(((-1.0)*x317*x351))+(((0.0010611)*r01*x321))+(((0.00802506)*sj0*x313))+(((-1.0)*px*x314*x325))+(((-1.0)*r00*x332))+(((0.00802506)*x320))+(((0.054)*x316*x343))+(((2.0)*x312*x316))+x370+((x319*x342))+(((-0.4084)*x316*x321))+((x307*x311))+((x306*x311))+((r01*x314*x339))+(((-1.0)*x311*x353))+(((0.0010611)*cj0*x319))+((x309*x327))+(((-1.0)*r01*x326))+((sj1*x311*x322))+(((-0.054)*x323*x330))+(((-1.0)*cj0*x314*x346))+((py*x318*x320))+(((-1.0)*x333*x347))+(((0.0420405175)*x311))+((x306*x324))+(((-0.0420405175)*x324))+(((-1.0)*r00*x307*x317))+(((0.4084)*x312*x319)));
evalcond[6]=((((2.01e-6)*x352))+(((0.0110268)*x320))+(((0.0110268)*sj0*x313))+(((-1.0)*x308*x310*x325))+(((-1.0)*sj0*x310*x350))+(((-1.0)*pz*x313*x314))+((x308*x323))+(((0.0393)*x309*x312))+(((-0.0393)*x311*x337))+((x332*x333))+(((-0.0005025)*sj2))+(((0.0010611)*x324))+(((-1.0)*x323*x354))+((sj2*x356))+(((-0.0393)*x316*x343))+(((-0.0010611)*x311))+(((0.0413547625)*x323))+(((-1.0)*x319*x326))+(((-1.0)*r01*sj0*x306*x310))+(((-1.0)*r01*x342))+(((-1.0)*x307*x310*x325))+((x314*x319*x339))+((cj0*x323*x326))+(((-1.0)*r00*x347))+((x311*x314*x345))+(((-0.007690662)*x355))+(((-0.0413547625)*cj0*x319))+(((-1.0)*r02*x322))+(((0.00726816)*cj2))+(((-1.0)*x327*x331))+((pz*r00*x318))+((x306*x323))+((r01*x308*x321))+(((-1.0)*x309*x360))+((x316*x334*x338))+((x319*x358))+(((0.007690662)*x359))+((x312*x314*x320))+(((0.4084)*r01*x312))+((x309*x335))+(((-0.0413547625)*r01*x321))+(((-1.0)*x316*x318)));
evalcond[7]=(((pz*x314*x333))+(((2.01e-6)*x355))+(((0.0405825175)*sj0*x313))+(((-0.00802506)*x311))+(((-1.0)*r02*x308*x310))+(((-0.0393)*x312*x319))+(((-1.0)*x308*x309*x344))+(((-1.0)*cj0*x320*x326))+(((-1.0)*x309*x326))+(((-1.0)*cj2*x356))+((x316*x337*x338))+(((-1.0)*x307*x309*x344))+(((-1.0)*x306*x313*x317))+(((-1.0)*r00*x336))+(((0.00802506)*x324))+((x311*x314*x329))+((x319*x335))+(((-1.0)*x307*x313*x317))+((x309*x314*x339))+(((0.0005025)*cj2))+(((-1.0)*x322*x325))+(((0.0393)*x316*x321))+((x331*x342))+((sj0*x308*x313))+(((-0.054)*r01*x312))+(((0.0110268)*r01*x321))+(((0.0405825175)*cj0*x309))+(((-1.0)*r01*x327))+(((0.00726816)*sj2))+(((0.0393)*x311*x334))+(((-0.0110268)*x323))+((x309*x358))+(((-1.0)*r02*x306*x310))+((x316*x341))+((x313*x332))+((x307*x320))+(((0.007690662)*x352))+(((0.007690662)*x357))+(((0.0405825175)*x320))+((x312*x314*x323))+((x319*x360))+(((-0.4084)*x346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x373=((5.2271179326386)*sj1);
IkReal x374=(pz*sj2);
IkReal x375=(cj0*px);
IkReal x376=((5.2271179326386)*cj1);
IkReal x377=(cj2*pz);
IkReal x378=((0.00136613818740228)*sj1);
IkReal x379=((0.00136613818740228)*cj1);
IkReal x380=(py*sj0*sj2);
IkReal x381=(cj2*py*sj0);
if( IKabs(((-0.0655859719422648)+((x378*x380))+(((-1.06741436757586)*cj2))+((x373*x381))+(((-1.0)*x376*x380))+((sj2*x375*x378))+((cj2*x375*x379))+(((-1.0)*x377*x378))+((x379*x381))+((x376*x377))+(((0.140853218763375)*sj2))+((x374*x379))+((x373*x374))+((cj2*x373*x375))+(((-1.0)*sj2*x375*x376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.945045845493716)+((x376*x381))+((x373*x380))+((sj2*x375*x379))+((cj2*x375*x376))+(((-1.0)*x377*x379))+(((-0.140853218763375)*cj2))+(((-1.0)*x374*x378))+(((-1.06741436757586)*sj2))+((x379*x380))+(((-1.0)*x373*x377))+(((-1.0)*cj2*x375*x378))+((sj2*x373*x375))+(((-1.0)*x378*x381))+((x374*x376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0655859719422648)+((x378*x380))+(((-1.06741436757586)*cj2))+((x373*x381))+(((-1.0)*x376*x380))+((sj2*x375*x378))+((cj2*x375*x379))+(((-1.0)*x377*x378))+((x379*x381))+((x376*x377))+(((0.140853218763375)*sj2))+((x374*x379))+((x373*x374))+((cj2*x373*x375))+(((-1.0)*sj2*x375*x376))))+IKsqr(((-0.945045845493716)+((x376*x381))+((x373*x380))+((sj2*x375*x379))+((cj2*x375*x376))+(((-1.0)*x377*x379))+(((-0.140853218763375)*cj2))+(((-1.0)*x374*x378))+(((-1.06741436757586)*sj2))+((x379*x380))+(((-1.0)*x373*x377))+(((-1.0)*cj2*x375*x378))+((sj2*x373*x375))+(((-1.0)*x378*x381))+((x374*x376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.0655859719422648)+((x378*x380))+(((-1.06741436757586)*cj2))+((x373*x381))+(((-1.0)*x376*x380))+((sj2*x375*x378))+((cj2*x375*x379))+(((-1.0)*x377*x378))+((x379*x381))+((x376*x377))+(((0.140853218763375)*sj2))+((x374*x379))+((x373*x374))+((cj2*x373*x375))+(((-1.0)*sj2*x375*x376))), ((-0.945045845493716)+((x376*x381))+((x373*x380))+((sj2*x375*x379))+((cj2*x375*x376))+(((-1.0)*x377*x379))+(((-0.140853218763375)*cj2))+(((-1.0)*x374*x378))+(((-1.06741436757586)*sj2))+((x379*x380))+(((-1.0)*x373*x377))+(((-1.0)*cj2*x375*x378))+((sj2*x373*x375))+(((-1.0)*x378*x381))+((x374*x376))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x382=IKcos(j3);
IkReal x383=IKsin(j3);
IkReal x384=((0.1808)*sj2);
IkReal x385=((0.0125)*cj2);
IkReal x386=((0.0125)*sj2);
IkReal x387=((0.1808)*cj2);
IkReal x388=px*px;
IkReal x389=pz*pz;
IkReal x390=py*py;
IkReal x391=(r00*sj1);
IkReal x392=((1.0)*cj1);
IkReal x393=(cj0*r01);
IkReal x394=(pz*sj0);
IkReal x395=(r01*sj1);
IkReal x396=((2.0)*pz);
IkReal x397=((0.19131)*sj2);
IkReal x398=(px*r02);
IkReal x399=((1.0)*sj0);
IkReal x400=((0.4084)*cj0);
IkReal x401=(cj1*r00);
IkReal x402=(cj1*r02);
IkReal x403=(cj1*sj0);
IkReal x404=((0.054)*pz);
IkReal x405=(r00*sj0);
IkReal x406=(cj0*r00);
IkReal x407=(r02*sj1);
IkReal x408=((0.0393)*py);
IkReal x409=((0.4084)*py);
IkReal x410=((0.19131)*cj2);
IkReal x411=(px*sj1);
IkReal x412=(cj0*py);
IkReal x413=(r02*sj0);
IkReal x414=((0.0393)*px);
IkReal x415=(cj1*r01);
IkReal x416=(cj1*pz);
IkReal x417=((0.0110268)*cj0);
IkReal x418=((0.4084)*px);
IkReal x419=((0.01965)*cj0);
IkReal x420=((0.054)*cj0);
IkReal x421=((0.054)*py);
IkReal x422=(sj0*sj1);
IkReal x423=((1.0)*cj0);
IkReal x424=(cj1*px);
IkReal x425=(pz*r02);
IkReal x426=((2.0)*py);
IkReal x427=(pz*sj1);
IkReal x428=((0.054)*px);
IkReal x429=((0.069176446)*x382);
IkReal x430=((0.00480083)*x383);
IkReal x431=(r01*x389);
IkReal x432=(r00*x390);
IkReal x433=(sj2*x383);
IkReal x434=(cj2*x383);
IkReal x435=((1.0)*x390);
IkReal x436=((1.0)*x389);
IkReal x437=((2.01e-6)*x382);
IkReal x438=(sj2*x382);
IkReal x439=(cj0*x388);
IkReal x440=(cj2*x382);
IkReal x441=(x382*x397);
IkReal x442=(x383*x410);
IkReal x443=((5.0e-5)*x433);
IkReal x444=((5.0e-5)*x440);
IkReal x445=(x383*x397);
IkReal x446=((5.0e-5)*x434);
IkReal x447=((5.0e-5)*x438);
IkReal x448=(x382*x410);
IkReal x449=(px*sj0*x426);
IkReal x450=(x386+x445);
IkReal x451=(x429+x430);
IkReal x452=(x387+x448+x447+x446);
IkReal x453=(x384+x385+x441+x443+x442);
evalcond[0]=((0.027)+(((-1.0)*py*sj0*x392))+(((-1.0)*cj0*px*x392))+(((-1.0)*x450))+x427+x452);
evalcond[1]=((0.2042)+(((-1.0)*x444))+(((-1.0)*py*sj1*x399))+(((-1.0)*pz*x392))+x453+(((-1.0)*x411*x423)));
evalcond[2]=((0.0270356561)+((x420*x424))+((x403*x421))+(((-1.0)*x436))+(((-1.0)*x435))+((sj0*x414))+((x409*x422))+(((-1.0)*x388))+x451+(((-1.0)*cj0*x408))+(((0.4084)*x416))+((x400*x411))+(((-1.0)*sj1*x404)));
evalcond[3]=((((-1.0)*x444))+((py*x391))+(((0.01965)*x402))+x453+(((-1.0)*sj0*x392*x398))+(((0.01965)*sj0*x395))+(((-0.2042)*x405))+(((0.2042)*x393))+(((-1.0)*pz*x392*x393))+((x394*x401))+(((-1.0)*px*x395))+((x402*x412))+((x391*x419)));
evalcond[4]=(((x407*x412))+(((-0.01965)*r01*x403))+(((-0.027)*x393))+(((0.027)*x405))+((px*x415))+(((-1.0)*x452))+((x391*x394))+(((0.01965)*x407))+(((-1.0)*x401*x419))+(((-1.0)*x393*x427))+x450+(((-1.0)*py*r00*x392))+(((-1.0)*sj1*x398*x399)));
evalcond[5]=((-0.0690403986)+(((-1.0)*r00*x389*x399))+(((-1.0)*px*x406*x426))+(((0.0420405175)*x393))+(((-0.054)*x391*x394))+(((-1.0)*r02*x396*x412))+(((-0.0393)*x425))+(((-1.0)*x393*x435))+(((-1.0)*x395*x418))+(((0.0010611)*r01*x403))+(((-1.0)*x451))+(((-1.0)*x399*x432))+(((0.054)*x398*x422))+((x388*x405))+(((0.4084)*x394*x401))+((py*x400*x402))+(((2.0)*x394*x398))+(((-0.4084)*x398*x403))+((sj1*x393*x404))+(((0.00802506)*sj0*x395))+((r01*x449))+(((-0.054)*x407*x412))+(((0.00802506)*x402))+(((-0.0010611)*x407))+(((-0.0420405175)*x405))+(((0.0010611)*cj0*x401))+((x401*x421))+(((-1.0)*r00*x414))+((x389*x393))+(((-1.0)*r01*x408))+(((-1.0)*x415*x428))+(((-0.4084)*x393*x416))+(((0.00802506)*cj0*x391))+((x391*x409))+((x388*x393)));
evalcond[6]=(((x394*x402*x426))+(((-0.007690662)*x440))+(((-2.01e-6)*x434))+(((0.0110268)*x402))+(((-1.0)*x390*x392*x406))+(((-0.0393)*x393*x427))+((x390*x407))+(((0.0005025)*sj2))+(((-0.0010611)*x393))+(((0.0413547625)*x407))+(((0.0110268)*sj0*x395))+((x393*x424*x426))+((x414*x415))+(((-1.0)*r02*x404))+(((-0.0413547625)*r01*x403))+(((-0.0393)*x398*x422))+(((0.0393)*x391*x394))+(((-1.0)*x401*x408))+((pz*r00*x400))+(((0.0010611)*x405))+(((-1.0)*r00*x428))+((r01*x390*x403))+((x388*x407))+(((-1.0)*r01*x421))+(((-1.0)*x398*x400))+(((-1.0)*sj0*x392*x431))+((x401*x449))+(((-1.0)*r01*sj0*x388*x392))+((x401*x439))+((cj0*x407*x408))+((cj0*cj1*x396*x398))+(((-1.0)*px*x391*x396))+(((-1.0)*x407*x436))+(((-1.0)*py*x395*x396))+(((0.007690662)*x433))+(((0.4084)*r01*x394))+((x391*x417))+(((-0.00726816)*cj2))+(((-1.0)*x409*x413))+(((-1.0)*x389*x392*x406))+(((-1.0)*sj2*x437))+(((-0.0413547625)*cj0*x401)));
evalcond[7]=((((-0.0005025)*cj2))+((x391*x449))+((px*x396*x401))+(((-2.01e-6)*x433))+((x398*x420))+(((-1.0)*x389*x395*x399))+((x391*x439))+(((-1.0)*r02*x390*x392))+(((-0.007690662)*x434))+(((-0.007690662)*x438))+(((-0.0393)*x394*x401))+(((0.0405825175)*x402))+((cj0*sj1*x396*x398))+((x413*x421))+(((-1.0)*r02*x388*x392))+(((0.0393)*x393*x416))+(((0.0110268)*r01*x403))+((x389*x402))+(((0.0405825175)*sj0*x395))+((x393*x411*x426))+(((-1.0)*x391*x408))+(((0.0405825175)*cj0*x391))+(((-1.0)*x404*x406))+(((-0.4084)*x425))+(((0.00802506)*x405))+(((-0.00802506)*x393))+((cj2*x437))+((py*x396*x415))+((x395*x414))+(((-1.0)*r00*x418))+(((-1.0)*r01*x409))+(((-1.0)*cj0*x402*x408))+(((-1.0)*x388*x395*x399))+(((-0.054)*r01*x394))+(((-1.0)*x389*x391*x423))+(((0.0393)*x398*x403))+((x401*x417))+(((-1.0)*x390*x391*x423))+(((-0.0110268)*x407))+(((-0.00726816)*sj2))+((sj0*x390*x395))+((x394*x407*x426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x454=(cj1*cj2);
IkReal x455=(cj1*sj2);
IkReal x456=(r01*sj0);
IkReal x457=(cj2*sj1);
IkReal x458=(sj1*sj2);
IkReal x459=((1.0)*cj0*r00);
CheckValue<IkReal> x460=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x460.valid){
continue;
}
CheckValue<IkReal> x461 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x455))+(((-1.0)*x454*x459))+(((-1.0)*x456*x458))+((r02*x457))+(((-1.0)*x454*x456))+(((-1.0)*x458*x459)))),IkReal((((cj0*r00*x457))+(((-1.0)*x455*x459))+((r02*x458))+((r02*x454))+(((-1.0)*x455*x456))+((x456*x457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x461.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x460.value)))+(x461.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x462=IKcos(j3);
IkReal x463=IKsin(j3);
IkReal x464=px*px;
IkReal x465=pz*pz;
IkReal x466=py*py;
IkReal x467=(cj2*cj4);
IkReal x468=(r01*sj0);
IkReal x469=((1.0)*sj1);
IkReal x470=(py*sj1);
IkReal x471=((0.0110268)*cj1);
IkReal x472=(r02*sj0);
IkReal x473=(cj0*r01);
IkReal x474=(sj2*sj4);
IkReal x475=(cj1*r00);
IkReal x476=((1.0)*cj0);
IkReal x477=(cj2*sj4);
IkReal x478=((2.0)*pz);
IkReal x479=((0.19131)*sj2);
IkReal x480=(pz*sj0);
IkReal x481=(cj1*r02);
IkReal x482=((0.0405825175)*sj1);
IkReal x483=((0.054)*py);
IkReal x484=((1.0)*cj1);
IkReal x485=(cj4*sj2);
IkReal x486=((0.4084)*py);
IkReal x487=(r00*sj0);
IkReal x488=((0.054)*r00);
IkReal x489=(cj0*pz);
IkReal x490=(r02*sj1);
IkReal x491=((0.0393)*cj0);
IkReal x492=((0.0393)*r01);
IkReal x493=((0.4084)*r00);
IkReal x494=(cj1*px);
IkReal x495=((0.0110268)*sj1);
IkReal x496=(px*sj1);
IkReal x497=(cj0*py);
IkReal x498=(cj1*pz);
IkReal x499=((0.054)*pz);
IkReal x500=(cj0*r00);
IkReal x501=((1.0)*pz);
IkReal x502=((0.0393)*r00);
IkReal x503=(py*sj0);
IkReal x504=((2.0)*px);
IkReal x505=((0.00802506)*sj1);
IkReal x506=((0.01965)*sj1);
IkReal x507=((0.054)*cj0);
IkReal x508=((0.027)*sj1);
IkReal x509=((0.4084)*pz);
IkReal x510=(cj1*py);
IkReal x511=((0.2042)*sj1);
IkReal x512=((0.0393)*pz);
IkReal x513=((1.0)*py);
IkReal x514=(cj4*x462);
IkReal x515=((0.0201)*x463);
IkReal x516=(cj0*px*r02);
IkReal x517=((0.069176446)*x462);
IkReal x518=((0.19131)*x462);
IkReal x519=((5.0e-5)*x462);
IkReal x520=((0.004539131)*x463);
IkReal x521=((1.0)*x463);
IkReal x522=((0.19131)*x463);
IkReal x523=(cj4*x463);
IkReal x524=((1.0)*x466);
IkReal x525=((0.007690662)*x462);
IkReal x526=((2.01e-6)*x462);
IkReal x527=((5.0e-5)*x463);
IkReal x528=((0.007690662)*x463);
IkReal x529=((2.01e-6)*x463);
IkReal x530=((1.0)*x465);
IkReal x531=((0.00480083)*x463);
IkReal x532=((0.0044711336)*x463);
IkReal x533=((1.0)*x464);
evalcond[0]=((((-1.0)*x462*x485))+(((-1.0)*x475*x476))+(((-1.0)*x467*x521))+x490+(((-1.0)*x468*x484)));
evalcond[1]=((((-1.0)*x468*x469))+(((-1.0)*x469*x500))+(((-1.0)*x481))+((x462*x467))+(((-1.0)*x485*x521)));
evalcond[2]=((0.027)+(((-1.0)*x484*x503))+(((0.1808)*cj2))+((cj2*x518))+((cj2*x527))+((pz*sj1))+((sj2*x519))+(((-0.0125)*sj2))+(((-1.0)*x463*x479))+(((-1.0)*x476*x494)));
evalcond[3]=((0.2042)+(((-1.0)*pz*x484))+((x462*x479))+(((-1.0)*cj0*px*x469))+((sj2*x527))+(((-1.0)*cj2*x519))+(((-1.0)*x469*x503))+(((0.1808)*sj2))+(((0.0125)*cj2))+((cj2*x522)));
evalcond[4]=((0.0270356561)+((x494*x507))+(((-1.0)*sj1*x499))+(((0.4084)*sj0*x470))+(((0.4084)*x498))+(((0.4084)*cj0*x496))+(((0.0393)*px*sj0))+(((-1.0)*x533))+(((-1.0)*x530))+(((-1.0)*x524))+x531+x517+((cj1*sj0*x483))+(((-1.0)*py*x491)));
evalcond[5]=((((-0.1808)*x514))+(((0.2042)*cj1*x468))+(((-1.0)*x468*x501))+(((-1.0)*x468*x508))+x516+(((0.2042)*cj0*x475))+((py*x472))+(((-0.2042)*x490))+(((-0.027)*x481))+(((-0.0125)*x523))+(((-1.0)*pz*r00*x476))+(((-0.19131)*cj4))+(((-1.0)*x500*x508)));
evalcond[6]=((((-0.1808)*x523))+(((0.027)*cj1*x468))+(((-1.0)*r01*x513))+(((0.027)*cj0*x475))+(((-1.0)*px*r00))+(((0.01965)*x487))+(((-5.0e-5)*cj4))+(((-0.0201)*sj4))+(((-0.027)*x490))+((x500*x511))+(((-0.01965)*x473))+(((0.2042)*x481))+((x468*x511))+(((0.0125)*x514))+(((-1.0)*r02*x501)));
evalcond[7]=((((-1.0)*x477*x522))+((x500*x506))+(((0.01965)*x481))+((x475*x480))+(((0.2042)*x473))+(((-1.0)*px*r01*x469))+(((-1.0)*x474*x518))+(((-0.1808)*x474))+((x468*x506))+(((-1.0)*px*x472*x484))+(((-0.2042)*x487))+(((-1.0)*x474*x527))+(((-0.0125)*x477))+((x481*x497))+((x477*x519))+(((-1.0)*pz*x473*x484))+(((-0.0201)*x462*x467))+((r00*x470))+((x485*x515)));
evalcond[8]=(((x474*x519))+(((-1.0)*x475*x513))+(((-1.0)*pz*x469*x473))+(((0.01965)*x490))+(((-1.0)*x467*x515))+(((-0.01965)*cj0*x475))+(((-0.0201)*x462*x485))+(((-0.01965)*cj1*x468))+(((-1.0)*px*x469*x472))+((x477*x527))+(((0.027)*x487))+(((0.1808)*x477))+((r00*sj1*x480))+(((-1.0)*x474*x522))+(((-0.0125)*x474))+((cj0*r02*x470))+((x477*x518))+((r01*x494))+(((-0.027)*x473)));
evalcond[9]=((((-1.0)*x487*x530))+(((-1.0)*x487*x524))+((x500*x505))+((sj1*x473*x499))+((sj4*x517))+(((-1.0)*r02*x470*x507))+(((0.0010611)*cj0*x475))+(((-1.0)*r02*x478*x497))+((x475*x483))+(((0.054)*x472*x496))+((x470*x493))+(((0.4084)*x475*x480))+(((0.0010611)*cj1*x468))+(((-0.054)*r01*x494))+((x465*x473))+((x468*x505))+(((-0.4084)*x472*x494))+(((-0.4084)*x473*x498))+((x464*x487))+(((-1.0)*r00*x497*x504))+((cj0*x481*x486))+(((-0.00726816)*x523))+(((0.00802506)*x481))+(((0.0690403986)*sj4))+(((-1.0)*sj1*x480*x488))+(((0.0005025)*x514))+((x464*x473))+(((-2.01e-6)*cj4))+(((-0.0420405175)*x487))+(((-1.0)*r02*x512))+(((-0.4084)*r01*x496))+(((-1.0)*py*x492))+(((-0.0010611)*x490))+(((-1.0)*x473*x524))+(((-1.0)*px*x502))+((py*x468*x504))+((sj4*x531))+(((0.0420405175)*x473))+((px*x472*x478)));
evalcond[10]=((((-1.0)*x477*x526))+((x471*x500))+((r01*x478*x510))+(((-1.0)*py*x481*x491))+(((0.0405825175)*x481))+((x470*x473*x504))+((x474*x529))+((x474*x525))+((px*r02*x507))+(((-1.0)*x488*x489))+((x482*x500))+(((-0.00476467)*x485))+((x470*x472*x478))+(((0.069178946)*x467))+(((0.0695359136)*x462*x467))+(((-1.0)*x466*x469*x500))+(((0.00802506)*x487))+(((-1.0)*x468*x499))+((x477*x528))+(((-1.0)*px*x493))+(((-0.0110268)*x490))+(((0.0393)*x472*x494))+((px*x475*x478))+(((0.0393)*x473*x498))+(((0.0005025)*x477))+(((-1.0)*x465*x469*x500))+((x470*x487*x504))+(((0.00726816)*x474))+((sj1*x464*x500))+((x467*x520))+(((-1.0)*x465*x468*x469))+((x465*x481))+((x468*x482))+((sj1*x466*x468))+(((-0.0393)*x475*x480))+(((-0.00802506)*x473))+(((-0.004500869)*x462*x485))+((cj0*px*x478*x490))+(((-1.0)*x464*x468*x469))+(((-1.0)*r01*x486))+((x468*x471))+(((-1.0)*x481*x524))+((x492*x496))+(((-1.0)*x481*x533))+(((-1.0)*x470*x502))+((x472*x483))+(((-1.0)*r02*x509))+(((-1.0)*x485*x532)));
evalcond[11]=((((-0.0393)*x472*x496))+((x475*x503*x504))+(((0.0010611)*x487))+(((-1.0)*r02*x465*x469))+(((-0.0010611)*x473))+(((-0.4084)*x516))+((cj0*x464*x475))+(((-1.0)*x466*x475*x476))+(((-0.00476467)*x467))+((x464*x490))+(((-1.0)*r02*x499))+(((0.0413547625)*x490))+(((-1.0)*x465*x475*x476))+((x474*x526))+((x489*x493))+((x468*x509))+(((-0.004500869)*x462*x467))+((x495*x500))+(((-0.0393)*py*x475))+((x477*x525))+((x477*x529))+(((2.0)*py*x473*x494))+((r02*x471))+(((-1.0)*x467*x532))+((x472*x478*x510))+(((-1.0)*sj1*x473*x512))+(((-0.0005025)*x474))+((x468*x495))+(((-1.0)*px*x488))+(((-0.0413547625)*cj0*x475))+((sj1*x480*x502))+((r02*x470*x491))+((cj0*px*x478*x481))+(((-1.0)*r00*x478*x496))+(((-1.0)*x474*x528))+(((0.00726816)*x477))+(((-1.0)*x465*x468*x484))+(((-1.0)*r01*x470*x478))+(((-1.0)*x464*x468*x484))+((cj1*x466*x468))+((x466*x490))+(((-1.0)*r01*x483))+(((-0.0695359136)*x462*x485))+(((-1.0)*x485*x520))+((x492*x494))+(((-0.0413547625)*cj1*x468))+(((-0.069178946)*x485))+(((-1.0)*x472*x486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "84648385246d7f62954e6a9ec105db59"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
